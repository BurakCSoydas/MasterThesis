// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_sensorspecific.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fsensorspecific_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fsensorspecific_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fsensorspecific_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fsensorspecific_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fsensorspecific_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_osi_5fsensorspecific_2eproto_metadata_getter(int index);
namespace osi3 {
class CameraSpecificObjectData;
struct CameraSpecificObjectDataDefaultTypeInternal;
extern CameraSpecificObjectDataDefaultTypeInternal _CameraSpecificObjectData_default_instance_;
class LidarSpecificObjectData;
struct LidarSpecificObjectDataDefaultTypeInternal;
extern LidarSpecificObjectDataDefaultTypeInternal _LidarSpecificObjectData_default_instance_;
class RadarSpecificObjectData;
struct RadarSpecificObjectDataDefaultTypeInternal;
extern RadarSpecificObjectDataDefaultTypeInternal _RadarSpecificObjectData_default_instance_;
class UltrasonicSpecificObjectData;
struct UltrasonicSpecificObjectDataDefaultTypeInternal;
extern UltrasonicSpecificObjectDataDefaultTypeInternal _UltrasonicSpecificObjectData_default_instance_;
class UltrasonicSpecificObjectData_Signalway;
struct UltrasonicSpecificObjectData_SignalwayDefaultTypeInternal;
extern UltrasonicSpecificObjectData_SignalwayDefaultTypeInternal _UltrasonicSpecificObjectData_Signalway_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::CameraSpecificObjectData* Arena::CreateMaybeMessage<::osi3::CameraSpecificObjectData>(Arena*);
template<> ::osi3::LidarSpecificObjectData* Arena::CreateMaybeMessage<::osi3::LidarSpecificObjectData>(Arena*);
template<> ::osi3::RadarSpecificObjectData* Arena::CreateMaybeMessage<::osi3::RadarSpecificObjectData>(Arena*);
template<> ::osi3::UltrasonicSpecificObjectData* Arena::CreateMaybeMessage<::osi3::UltrasonicSpecificObjectData>(Arena*);
template<> ::osi3::UltrasonicSpecificObjectData_Signalway* Arena::CreateMaybeMessage<::osi3::UltrasonicSpecificObjectData_Signalway>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

enum UltrasonicSpecificObjectData_TrilaterationStatus : int {
  UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_UNKNOWN = 0,
  UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_OTHER = 1,
  UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_NOT_TRILATERATED = 2,
  UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_TRILATERATED = 3,
  UltrasonicSpecificObjectData_TrilaterationStatus_UltrasonicSpecificObjectData_TrilaterationStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UltrasonicSpecificObjectData_TrilaterationStatus_UltrasonicSpecificObjectData_TrilaterationStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UltrasonicSpecificObjectData_TrilaterationStatus_IsValid(int value);
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData_TrilaterationStatus_TrilaterationStatus_MIN = UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_UNKNOWN;
constexpr UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData_TrilaterationStatus_TrilaterationStatus_MAX = UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_TRILATERATED;
constexpr int UltrasonicSpecificObjectData_TrilaterationStatus_TrilaterationStatus_ARRAYSIZE = UltrasonicSpecificObjectData_TrilaterationStatus_TrilaterationStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicSpecificObjectData_TrilaterationStatus_descriptor();
template<typename T>
inline const std::string& UltrasonicSpecificObjectData_TrilaterationStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UltrasonicSpecificObjectData_TrilaterationStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UltrasonicSpecificObjectData_TrilaterationStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UltrasonicSpecificObjectData_TrilaterationStatus_descriptor(), enum_t_value);
}
inline bool UltrasonicSpecificObjectData_TrilaterationStatus_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UltrasonicSpecificObjectData_TrilaterationStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UltrasonicSpecificObjectData_TrilaterationStatus>(
    UltrasonicSpecificObjectData_TrilaterationStatus_descriptor(), name, value);
}
enum UltrasonicSpecificObjectData_Trend : int {
  UltrasonicSpecificObjectData_Trend_TREND_UNKNOWN = 0,
  UltrasonicSpecificObjectData_Trend_TREND_OTHER = 1,
  UltrasonicSpecificObjectData_Trend_TREND_CONSTANT_APPROACHING = 2,
  UltrasonicSpecificObjectData_Trend_TREND_CONSTANT = 3,
  UltrasonicSpecificObjectData_Trend_TREND_APPROACHING = 4,
  UltrasonicSpecificObjectData_Trend_TREND_DEPARTING = 5,
  UltrasonicSpecificObjectData_Trend_UltrasonicSpecificObjectData_Trend_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  UltrasonicSpecificObjectData_Trend_UltrasonicSpecificObjectData_Trend_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool UltrasonicSpecificObjectData_Trend_IsValid(int value);
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData_Trend_Trend_MIN = UltrasonicSpecificObjectData_Trend_TREND_UNKNOWN;
constexpr UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData_Trend_Trend_MAX = UltrasonicSpecificObjectData_Trend_TREND_DEPARTING;
constexpr int UltrasonicSpecificObjectData_Trend_Trend_ARRAYSIZE = UltrasonicSpecificObjectData_Trend_Trend_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UltrasonicSpecificObjectData_Trend_descriptor();
template<typename T>
inline const std::string& UltrasonicSpecificObjectData_Trend_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UltrasonicSpecificObjectData_Trend>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UltrasonicSpecificObjectData_Trend_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UltrasonicSpecificObjectData_Trend_descriptor(), enum_t_value);
}
inline bool UltrasonicSpecificObjectData_Trend_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UltrasonicSpecificObjectData_Trend* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UltrasonicSpecificObjectData_Trend>(
    UltrasonicSpecificObjectData_Trend_descriptor(), name, value);
}
// ===================================================================

class RadarSpecificObjectData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.RadarSpecificObjectData) */ {
 public:
  inline RadarSpecificObjectData() : RadarSpecificObjectData(nullptr) {}
  virtual ~RadarSpecificObjectData();
  explicit constexpr RadarSpecificObjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RadarSpecificObjectData(const RadarSpecificObjectData& from);
  RadarSpecificObjectData(RadarSpecificObjectData&& from) noexcept
    : RadarSpecificObjectData() {
    *this = ::std::move(from);
  }

  inline RadarSpecificObjectData& operator=(const RadarSpecificObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarSpecificObjectData& operator=(RadarSpecificObjectData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarSpecificObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const RadarSpecificObjectData* internal_default_instance() {
    return reinterpret_cast<const RadarSpecificObjectData*>(
               &_RadarSpecificObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarSpecificObjectData& a, RadarSpecificObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarSpecificObjectData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarSpecificObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarSpecificObjectData* New() const final {
    return CreateMaybeMessage<RadarSpecificObjectData>(nullptr);
  }

  RadarSpecificObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarSpecificObjectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarSpecificObjectData& from);
  void MergeFrom(const RadarSpecificObjectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarSpecificObjectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.RadarSpecificObjectData";
  }
  protected:
  explicit RadarSpecificObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fsensorspecific_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRcsFieldNumber = 1,
  };
  // double rcs = 1;
  void clear_rcs();
  double rcs() const;
  void set_rcs(double value);
  private:
  double _internal_rcs() const;
  void _internal_set_rcs(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.RadarSpecificObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double rcs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fsensorspecific_2eproto;
};
// -------------------------------------------------------------------

class LidarSpecificObjectData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LidarSpecificObjectData) */ {
 public:
  inline LidarSpecificObjectData() : LidarSpecificObjectData(nullptr) {}
  virtual ~LidarSpecificObjectData();
  explicit constexpr LidarSpecificObjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LidarSpecificObjectData(const LidarSpecificObjectData& from);
  LidarSpecificObjectData(LidarSpecificObjectData&& from) noexcept
    : LidarSpecificObjectData() {
    *this = ::std::move(from);
  }

  inline LidarSpecificObjectData& operator=(const LidarSpecificObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline LidarSpecificObjectData& operator=(LidarSpecificObjectData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LidarSpecificObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const LidarSpecificObjectData* internal_default_instance() {
    return reinterpret_cast<const LidarSpecificObjectData*>(
               &_LidarSpecificObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LidarSpecificObjectData& a, LidarSpecificObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(LidarSpecificObjectData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LidarSpecificObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LidarSpecificObjectData* New() const final {
    return CreateMaybeMessage<LidarSpecificObjectData>(nullptr);
  }

  LidarSpecificObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LidarSpecificObjectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LidarSpecificObjectData& from);
  void MergeFrom(const LidarSpecificObjectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LidarSpecificObjectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LidarSpecificObjectData";
  }
  protected:
  explicit LidarSpecificObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fsensorspecific_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:osi3.LidarSpecificObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fsensorspecific_2eproto;
};
// -------------------------------------------------------------------

class CameraSpecificObjectData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.CameraSpecificObjectData) */ {
 public:
  inline CameraSpecificObjectData() : CameraSpecificObjectData(nullptr) {}
  virtual ~CameraSpecificObjectData();
  explicit constexpr CameraSpecificObjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CameraSpecificObjectData(const CameraSpecificObjectData& from);
  CameraSpecificObjectData(CameraSpecificObjectData&& from) noexcept
    : CameraSpecificObjectData() {
    *this = ::std::move(from);
  }

  inline CameraSpecificObjectData& operator=(const CameraSpecificObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CameraSpecificObjectData& operator=(CameraSpecificObjectData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CameraSpecificObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const CameraSpecificObjectData* internal_default_instance() {
    return reinterpret_cast<const CameraSpecificObjectData*>(
               &_CameraSpecificObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CameraSpecificObjectData& a, CameraSpecificObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(CameraSpecificObjectData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CameraSpecificObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CameraSpecificObjectData* New() const final {
    return CreateMaybeMessage<CameraSpecificObjectData>(nullptr);
  }

  CameraSpecificObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CameraSpecificObjectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CameraSpecificObjectData& from);
  void MergeFrom(const CameraSpecificObjectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CameraSpecificObjectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.CameraSpecificObjectData";
  }
  protected:
  explicit CameraSpecificObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fsensorspecific_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:osi3.CameraSpecificObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fsensorspecific_2eproto;
};
// -------------------------------------------------------------------

class UltrasonicSpecificObjectData_Signalway PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.UltrasonicSpecificObjectData.Signalway) */ {
 public:
  inline UltrasonicSpecificObjectData_Signalway() : UltrasonicSpecificObjectData_Signalway(nullptr) {}
  virtual ~UltrasonicSpecificObjectData_Signalway();
  explicit constexpr UltrasonicSpecificObjectData_Signalway(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UltrasonicSpecificObjectData_Signalway(const UltrasonicSpecificObjectData_Signalway& from);
  UltrasonicSpecificObjectData_Signalway(UltrasonicSpecificObjectData_Signalway&& from) noexcept
    : UltrasonicSpecificObjectData_Signalway() {
    *this = ::std::move(from);
  }

  inline UltrasonicSpecificObjectData_Signalway& operator=(const UltrasonicSpecificObjectData_Signalway& from) {
    CopyFrom(from);
    return *this;
  }
  inline UltrasonicSpecificObjectData_Signalway& operator=(UltrasonicSpecificObjectData_Signalway&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UltrasonicSpecificObjectData_Signalway& default_instance() {
    return *internal_default_instance();
  }
  static inline const UltrasonicSpecificObjectData_Signalway* internal_default_instance() {
    return reinterpret_cast<const UltrasonicSpecificObjectData_Signalway*>(
               &_UltrasonicSpecificObjectData_Signalway_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UltrasonicSpecificObjectData_Signalway& a, UltrasonicSpecificObjectData_Signalway& b) {
    a.Swap(&b);
  }
  inline void Swap(UltrasonicSpecificObjectData_Signalway* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UltrasonicSpecificObjectData_Signalway* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UltrasonicSpecificObjectData_Signalway* New() const final {
    return CreateMaybeMessage<UltrasonicSpecificObjectData_Signalway>(nullptr);
  }

  UltrasonicSpecificObjectData_Signalway* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UltrasonicSpecificObjectData_Signalway>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UltrasonicSpecificObjectData_Signalway& from);
  void MergeFrom(const UltrasonicSpecificObjectData_Signalway& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UltrasonicSpecificObjectData_Signalway* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.UltrasonicSpecificObjectData.Signalway";
  }
  protected:
  explicit UltrasonicSpecificObjectData_Signalway(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fsensorspecific_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSenderIdFieldNumber = 1,
    kReceiverIdFieldNumber = 2,
  };
  // .osi3.Identifier sender_id = 1;
  bool has_sender_id() const;
  private:
  bool _internal_has_sender_id() const;
  public:
  void clear_sender_id();
  const ::osi3::Identifier& sender_id() const;
  ::osi3::Identifier* release_sender_id();
  ::osi3::Identifier* mutable_sender_id();
  void set_allocated_sender_id(::osi3::Identifier* sender_id);
  private:
  const ::osi3::Identifier& _internal_sender_id() const;
  ::osi3::Identifier* _internal_mutable_sender_id();
  public:
  void unsafe_arena_set_allocated_sender_id(
      ::osi3::Identifier* sender_id);
  ::osi3::Identifier* unsafe_arena_release_sender_id();

  // .osi3.Identifier receiver_id = 2;
  bool has_receiver_id() const;
  private:
  bool _internal_has_receiver_id() const;
  public:
  void clear_receiver_id();
  const ::osi3::Identifier& receiver_id() const;
  ::osi3::Identifier* release_receiver_id();
  ::osi3::Identifier* mutable_receiver_id();
  void set_allocated_receiver_id(::osi3::Identifier* receiver_id);
  private:
  const ::osi3::Identifier& _internal_receiver_id() const;
  ::osi3::Identifier* _internal_mutable_receiver_id();
  public:
  void unsafe_arena_set_allocated_receiver_id(
      ::osi3::Identifier* receiver_id);
  ::osi3::Identifier* unsafe_arena_release_receiver_id();

  // @@protoc_insertion_point(class_scope:osi3.UltrasonicSpecificObjectData.Signalway)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osi3::Identifier* sender_id_;
  ::osi3::Identifier* receiver_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fsensorspecific_2eproto;
};
// -------------------------------------------------------------------

class UltrasonicSpecificObjectData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.UltrasonicSpecificObjectData) */ {
 public:
  inline UltrasonicSpecificObjectData() : UltrasonicSpecificObjectData(nullptr) {}
  virtual ~UltrasonicSpecificObjectData();
  explicit constexpr UltrasonicSpecificObjectData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UltrasonicSpecificObjectData(const UltrasonicSpecificObjectData& from);
  UltrasonicSpecificObjectData(UltrasonicSpecificObjectData&& from) noexcept
    : UltrasonicSpecificObjectData() {
    *this = ::std::move(from);
  }

  inline UltrasonicSpecificObjectData& operator=(const UltrasonicSpecificObjectData& from) {
    CopyFrom(from);
    return *this;
  }
  inline UltrasonicSpecificObjectData& operator=(UltrasonicSpecificObjectData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UltrasonicSpecificObjectData& default_instance() {
    return *internal_default_instance();
  }
  static inline const UltrasonicSpecificObjectData* internal_default_instance() {
    return reinterpret_cast<const UltrasonicSpecificObjectData*>(
               &_UltrasonicSpecificObjectData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UltrasonicSpecificObjectData& a, UltrasonicSpecificObjectData& b) {
    a.Swap(&b);
  }
  inline void Swap(UltrasonicSpecificObjectData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UltrasonicSpecificObjectData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UltrasonicSpecificObjectData* New() const final {
    return CreateMaybeMessage<UltrasonicSpecificObjectData>(nullptr);
  }

  UltrasonicSpecificObjectData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UltrasonicSpecificObjectData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UltrasonicSpecificObjectData& from);
  void MergeFrom(const UltrasonicSpecificObjectData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UltrasonicSpecificObjectData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.UltrasonicSpecificObjectData";
  }
  protected:
  explicit UltrasonicSpecificObjectData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fsensorspecific_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef UltrasonicSpecificObjectData_Signalway Signalway;

  typedef UltrasonicSpecificObjectData_TrilaterationStatus TrilaterationStatus;
  static constexpr TrilaterationStatus TRILATERATION_STATUS_UNKNOWN =
    UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_UNKNOWN;
  static constexpr TrilaterationStatus TRILATERATION_STATUS_OTHER =
    UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_OTHER;
  static constexpr TrilaterationStatus TRILATERATION_STATUS_NOT_TRILATERATED =
    UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_NOT_TRILATERATED;
  static constexpr TrilaterationStatus TRILATERATION_STATUS_TRILATERATED =
    UltrasonicSpecificObjectData_TrilaterationStatus_TRILATERATION_STATUS_TRILATERATED;
  static inline bool TrilaterationStatus_IsValid(int value) {
    return UltrasonicSpecificObjectData_TrilaterationStatus_IsValid(value);
  }
  static constexpr TrilaterationStatus TrilaterationStatus_MIN =
    UltrasonicSpecificObjectData_TrilaterationStatus_TrilaterationStatus_MIN;
  static constexpr TrilaterationStatus TrilaterationStatus_MAX =
    UltrasonicSpecificObjectData_TrilaterationStatus_TrilaterationStatus_MAX;
  static constexpr int TrilaterationStatus_ARRAYSIZE =
    UltrasonicSpecificObjectData_TrilaterationStatus_TrilaterationStatus_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  TrilaterationStatus_descriptor() {
    return UltrasonicSpecificObjectData_TrilaterationStatus_descriptor();
  }
  template<typename T>
  static inline const std::string& TrilaterationStatus_Name(T enum_t_value) {
    static_assert(::std::is_same<T, TrilaterationStatus>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function TrilaterationStatus_Name.");
    return UltrasonicSpecificObjectData_TrilaterationStatus_Name(enum_t_value);
  }
  static inline bool TrilaterationStatus_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      TrilaterationStatus* value) {
    return UltrasonicSpecificObjectData_TrilaterationStatus_Parse(name, value);
  }

  typedef UltrasonicSpecificObjectData_Trend Trend;
  static constexpr Trend TREND_UNKNOWN =
    UltrasonicSpecificObjectData_Trend_TREND_UNKNOWN;
  static constexpr Trend TREND_OTHER =
    UltrasonicSpecificObjectData_Trend_TREND_OTHER;
  static constexpr Trend TREND_CONSTANT_APPROACHING =
    UltrasonicSpecificObjectData_Trend_TREND_CONSTANT_APPROACHING;
  static constexpr Trend TREND_CONSTANT =
    UltrasonicSpecificObjectData_Trend_TREND_CONSTANT;
  static constexpr Trend TREND_APPROACHING =
    UltrasonicSpecificObjectData_Trend_TREND_APPROACHING;
  static constexpr Trend TREND_DEPARTING =
    UltrasonicSpecificObjectData_Trend_TREND_DEPARTING;
  static inline bool Trend_IsValid(int value) {
    return UltrasonicSpecificObjectData_Trend_IsValid(value);
  }
  static constexpr Trend Trend_MIN =
    UltrasonicSpecificObjectData_Trend_Trend_MIN;
  static constexpr Trend Trend_MAX =
    UltrasonicSpecificObjectData_Trend_Trend_MAX;
  static constexpr int Trend_ARRAYSIZE =
    UltrasonicSpecificObjectData_Trend_Trend_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Trend_descriptor() {
    return UltrasonicSpecificObjectData_Trend_descriptor();
  }
  template<typename T>
  static inline const std::string& Trend_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Trend>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Trend_Name.");
    return UltrasonicSpecificObjectData_Trend_Name(enum_t_value);
  }
  static inline bool Trend_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Trend* value) {
    return UltrasonicSpecificObjectData_Trend_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kSignalwayFieldNumber = 5,
    kMaximumMeasurementDistanceSensorFieldNumber = 1,
    kProbabilityFieldNumber = 2,
    kTrilaterationStatusFieldNumber = 3,
    kTrendFieldNumber = 4,
  };
  // repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
  int signalway_size() const;
  private:
  int _internal_signalway_size() const;
  public:
  void clear_signalway();
  ::osi3::UltrasonicSpecificObjectData_Signalway* mutable_signalway(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::UltrasonicSpecificObjectData_Signalway >*
      mutable_signalway();
  private:
  const ::osi3::UltrasonicSpecificObjectData_Signalway& _internal_signalway(int index) const;
  ::osi3::UltrasonicSpecificObjectData_Signalway* _internal_add_signalway();
  public:
  const ::osi3::UltrasonicSpecificObjectData_Signalway& signalway(int index) const;
  ::osi3::UltrasonicSpecificObjectData_Signalway* add_signalway();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::UltrasonicSpecificObjectData_Signalway >&
      signalway() const;

  // double maximum_measurement_distance_sensor = 1;
  void clear_maximum_measurement_distance_sensor();
  double maximum_measurement_distance_sensor() const;
  void set_maximum_measurement_distance_sensor(double value);
  private:
  double _internal_maximum_measurement_distance_sensor() const;
  void _internal_set_maximum_measurement_distance_sensor(double value);
  public:

  // double probability = 2;
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
  void clear_trilateration_status();
  ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus trilateration_status() const;
  void set_trilateration_status(::osi3::UltrasonicSpecificObjectData_TrilaterationStatus value);
  private:
  ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus _internal_trilateration_status() const;
  void _internal_set_trilateration_status(::osi3::UltrasonicSpecificObjectData_TrilaterationStatus value);
  public:

  // .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
  void clear_trend();
  ::osi3::UltrasonicSpecificObjectData_Trend trend() const;
  void set_trend(::osi3::UltrasonicSpecificObjectData_Trend value);
  private:
  ::osi3::UltrasonicSpecificObjectData_Trend _internal_trend() const;
  void _internal_set_trend(::osi3::UltrasonicSpecificObjectData_Trend value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.UltrasonicSpecificObjectData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::UltrasonicSpecificObjectData_Signalway > signalway_;
  double maximum_measurement_distance_sensor_;
  double probability_;
  int trilateration_status_;
  int trend_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fsensorspecific_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarSpecificObjectData

// double rcs = 1;
inline void RadarSpecificObjectData::clear_rcs() {
  rcs_ = 0;
}
inline double RadarSpecificObjectData::_internal_rcs() const {
  return rcs_;
}
inline double RadarSpecificObjectData::rcs() const {
  // @@protoc_insertion_point(field_get:osi3.RadarSpecificObjectData.rcs)
  return _internal_rcs();
}
inline void RadarSpecificObjectData::_internal_set_rcs(double value) {
  
  rcs_ = value;
}
inline void RadarSpecificObjectData::set_rcs(double value) {
  _internal_set_rcs(value);
  // @@protoc_insertion_point(field_set:osi3.RadarSpecificObjectData.rcs)
}

// -------------------------------------------------------------------

// LidarSpecificObjectData

// -------------------------------------------------------------------

// CameraSpecificObjectData

// -------------------------------------------------------------------

// UltrasonicSpecificObjectData_Signalway

// .osi3.Identifier sender_id = 1;
inline bool UltrasonicSpecificObjectData_Signalway::_internal_has_sender_id() const {
  return this != internal_default_instance() && sender_id_ != nullptr;
}
inline bool UltrasonicSpecificObjectData_Signalway::has_sender_id() const {
  return _internal_has_sender_id();
}
inline const ::osi3::Identifier& UltrasonicSpecificObjectData_Signalway::_internal_sender_id() const {
  const ::osi3::Identifier* p = sender_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Identifier&>(
      ::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& UltrasonicSpecificObjectData_Signalway::sender_id() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSpecificObjectData.Signalway.sender_id)
  return _internal_sender_id();
}
inline void UltrasonicSpecificObjectData_Signalway::unsafe_arena_set_allocated_sender_id(
    ::osi3::Identifier* sender_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_id_);
  }
  sender_id_ = sender_id;
  if (sender_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.UltrasonicSpecificObjectData.Signalway.sender_id)
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::release_sender_id() {
  
  ::osi3::Identifier* temp = sender_id_;
  sender_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::unsafe_arena_release_sender_id() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSpecificObjectData.Signalway.sender_id)
  
  ::osi3::Identifier* temp = sender_id_;
  sender_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::_internal_mutable_sender_id() {
  
  if (sender_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArena());
    sender_id_ = p;
  }
  return sender_id_;
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::mutable_sender_id() {
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSpecificObjectData.Signalway.sender_id)
  return _internal_mutable_sender_id();
}
inline void UltrasonicSpecificObjectData_Signalway::set_allocated_sender_id(::osi3::Identifier* sender_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_id_);
  }
  if (sender_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_id)->GetArena();
    if (message_arena != submessage_arena) {
      sender_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender_id, submessage_arena);
    }
    
  } else {
    
  }
  sender_id_ = sender_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSpecificObjectData.Signalway.sender_id)
}

// .osi3.Identifier receiver_id = 2;
inline bool UltrasonicSpecificObjectData_Signalway::_internal_has_receiver_id() const {
  return this != internal_default_instance() && receiver_id_ != nullptr;
}
inline bool UltrasonicSpecificObjectData_Signalway::has_receiver_id() const {
  return _internal_has_receiver_id();
}
inline const ::osi3::Identifier& UltrasonicSpecificObjectData_Signalway::_internal_receiver_id() const {
  const ::osi3::Identifier* p = receiver_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Identifier&>(
      ::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& UltrasonicSpecificObjectData_Signalway::receiver_id() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSpecificObjectData.Signalway.receiver_id)
  return _internal_receiver_id();
}
inline void UltrasonicSpecificObjectData_Signalway::unsafe_arena_set_allocated_receiver_id(
    ::osi3::Identifier* receiver_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_id_);
  }
  receiver_id_ = receiver_id;
  if (receiver_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.UltrasonicSpecificObjectData.Signalway.receiver_id)
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::release_receiver_id() {
  
  ::osi3::Identifier* temp = receiver_id_;
  receiver_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::unsafe_arena_release_receiver_id() {
  // @@protoc_insertion_point(field_release:osi3.UltrasonicSpecificObjectData.Signalway.receiver_id)
  
  ::osi3::Identifier* temp = receiver_id_;
  receiver_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::_internal_mutable_receiver_id() {
  
  if (receiver_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArena());
    receiver_id_ = p;
  }
  return receiver_id_;
}
inline ::osi3::Identifier* UltrasonicSpecificObjectData_Signalway::mutable_receiver_id() {
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSpecificObjectData.Signalway.receiver_id)
  return _internal_mutable_receiver_id();
}
inline void UltrasonicSpecificObjectData_Signalway::set_allocated_receiver_id(::osi3::Identifier* receiver_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_id_);
  }
  if (receiver_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receiver_id)->GetArena();
    if (message_arena != submessage_arena) {
      receiver_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receiver_id, submessage_arena);
    }
    
  } else {
    
  }
  receiver_id_ = receiver_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.UltrasonicSpecificObjectData.Signalway.receiver_id)
}

// -------------------------------------------------------------------

// UltrasonicSpecificObjectData

// double maximum_measurement_distance_sensor = 1;
inline void UltrasonicSpecificObjectData::clear_maximum_measurement_distance_sensor() {
  maximum_measurement_distance_sensor_ = 0;
}
inline double UltrasonicSpecificObjectData::_internal_maximum_measurement_distance_sensor() const {
  return maximum_measurement_distance_sensor_;
}
inline double UltrasonicSpecificObjectData::maximum_measurement_distance_sensor() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSpecificObjectData.maximum_measurement_distance_sensor)
  return _internal_maximum_measurement_distance_sensor();
}
inline void UltrasonicSpecificObjectData::_internal_set_maximum_measurement_distance_sensor(double value) {
  
  maximum_measurement_distance_sensor_ = value;
}
inline void UltrasonicSpecificObjectData::set_maximum_measurement_distance_sensor(double value) {
  _internal_set_maximum_measurement_distance_sensor(value);
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSpecificObjectData.maximum_measurement_distance_sensor)
}

// double probability = 2;
inline void UltrasonicSpecificObjectData::clear_probability() {
  probability_ = 0;
}
inline double UltrasonicSpecificObjectData::_internal_probability() const {
  return probability_;
}
inline double UltrasonicSpecificObjectData::probability() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSpecificObjectData.probability)
  return _internal_probability();
}
inline void UltrasonicSpecificObjectData::_internal_set_probability(double value) {
  
  probability_ = value;
}
inline void UltrasonicSpecificObjectData::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSpecificObjectData.probability)
}

// .osi3.UltrasonicSpecificObjectData.TrilaterationStatus trilateration_status = 3;
inline void UltrasonicSpecificObjectData::clear_trilateration_status() {
  trilateration_status_ = 0;
}
inline ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::_internal_trilateration_status() const {
  return static_cast< ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus >(trilateration_status_);
}
inline ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus UltrasonicSpecificObjectData::trilateration_status() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSpecificObjectData.trilateration_status)
  return _internal_trilateration_status();
}
inline void UltrasonicSpecificObjectData::_internal_set_trilateration_status(::osi3::UltrasonicSpecificObjectData_TrilaterationStatus value) {
  
  trilateration_status_ = value;
}
inline void UltrasonicSpecificObjectData::set_trilateration_status(::osi3::UltrasonicSpecificObjectData_TrilaterationStatus value) {
  _internal_set_trilateration_status(value);
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSpecificObjectData.trilateration_status)
}

// .osi3.UltrasonicSpecificObjectData.Trend trend = 4;
inline void UltrasonicSpecificObjectData::clear_trend() {
  trend_ = 0;
}
inline ::osi3::UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::_internal_trend() const {
  return static_cast< ::osi3::UltrasonicSpecificObjectData_Trend >(trend_);
}
inline ::osi3::UltrasonicSpecificObjectData_Trend UltrasonicSpecificObjectData::trend() const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSpecificObjectData.trend)
  return _internal_trend();
}
inline void UltrasonicSpecificObjectData::_internal_set_trend(::osi3::UltrasonicSpecificObjectData_Trend value) {
  
  trend_ = value;
}
inline void UltrasonicSpecificObjectData::set_trend(::osi3::UltrasonicSpecificObjectData_Trend value) {
  _internal_set_trend(value);
  // @@protoc_insertion_point(field_set:osi3.UltrasonicSpecificObjectData.trend)
}

// repeated .osi3.UltrasonicSpecificObjectData.Signalway signalway = 5;
inline int UltrasonicSpecificObjectData::_internal_signalway_size() const {
  return signalway_.size();
}
inline int UltrasonicSpecificObjectData::signalway_size() const {
  return _internal_signalway_size();
}
inline void UltrasonicSpecificObjectData::clear_signalway() {
  signalway_.Clear();
}
inline ::osi3::UltrasonicSpecificObjectData_Signalway* UltrasonicSpecificObjectData::mutable_signalway(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.UltrasonicSpecificObjectData.signalway)
  return signalway_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::UltrasonicSpecificObjectData_Signalway >*
UltrasonicSpecificObjectData::mutable_signalway() {
  // @@protoc_insertion_point(field_mutable_list:osi3.UltrasonicSpecificObjectData.signalway)
  return &signalway_;
}
inline const ::osi3::UltrasonicSpecificObjectData_Signalway& UltrasonicSpecificObjectData::_internal_signalway(int index) const {
  return signalway_.Get(index);
}
inline const ::osi3::UltrasonicSpecificObjectData_Signalway& UltrasonicSpecificObjectData::signalway(int index) const {
  // @@protoc_insertion_point(field_get:osi3.UltrasonicSpecificObjectData.signalway)
  return _internal_signalway(index);
}
inline ::osi3::UltrasonicSpecificObjectData_Signalway* UltrasonicSpecificObjectData::_internal_add_signalway() {
  return signalway_.Add();
}
inline ::osi3::UltrasonicSpecificObjectData_Signalway* UltrasonicSpecificObjectData::add_signalway() {
  // @@protoc_insertion_point(field_add:osi3.UltrasonicSpecificObjectData.signalway)
  return _internal_add_signalway();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::UltrasonicSpecificObjectData_Signalway >&
UltrasonicSpecificObjectData::signalway() const {
  // @@protoc_insertion_point(field_list:osi3.UltrasonicSpecificObjectData.signalway)
  return signalway_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus>() {
  return ::osi3::UltrasonicSpecificObjectData_TrilaterationStatus_descriptor();
}
template <> struct is_proto_enum< ::osi3::UltrasonicSpecificObjectData_Trend> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::osi3::UltrasonicSpecificObjectData_Trend>() {
  return ::osi3::UltrasonicSpecificObjectData_Trend_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fsensorspecific_2eproto
