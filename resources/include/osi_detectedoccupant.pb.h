// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_detectedoccupant.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedoccupant_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedoccupant_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "osi_occupant.pb.h"
#include "osi_detectedobject.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fdetectedoccupant_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fdetectedoccupant_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fdetectedoccupant_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_osi_5fdetectedoccupant_2eproto_metadata_getter(int index);
namespace osi3 {
class DetectedOccupant;
struct DetectedOccupantDefaultTypeInternal;
extern DetectedOccupantDefaultTypeInternal _DetectedOccupant_default_instance_;
class DetectedOccupant_CandidateOccupant;
struct DetectedOccupant_CandidateOccupantDefaultTypeInternal;
extern DetectedOccupant_CandidateOccupantDefaultTypeInternal _DetectedOccupant_CandidateOccupant_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::DetectedOccupant* Arena::CreateMaybeMessage<::osi3::DetectedOccupant>(Arena*);
template<> ::osi3::DetectedOccupant_CandidateOccupant* Arena::CreateMaybeMessage<::osi3::DetectedOccupant_CandidateOccupant>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class DetectedOccupant_CandidateOccupant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedOccupant.CandidateOccupant) */ {
 public:
  inline DetectedOccupant_CandidateOccupant() : DetectedOccupant_CandidateOccupant(nullptr) {}
  virtual ~DetectedOccupant_CandidateOccupant();
  explicit constexpr DetectedOccupant_CandidateOccupant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectedOccupant_CandidateOccupant(const DetectedOccupant_CandidateOccupant& from);
  DetectedOccupant_CandidateOccupant(DetectedOccupant_CandidateOccupant&& from) noexcept
    : DetectedOccupant_CandidateOccupant() {
    *this = ::std::move(from);
  }

  inline DetectedOccupant_CandidateOccupant& operator=(const DetectedOccupant_CandidateOccupant& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedOccupant_CandidateOccupant& operator=(DetectedOccupant_CandidateOccupant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedOccupant_CandidateOccupant& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectedOccupant_CandidateOccupant* internal_default_instance() {
    return reinterpret_cast<const DetectedOccupant_CandidateOccupant*>(
               &_DetectedOccupant_CandidateOccupant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DetectedOccupant_CandidateOccupant& a, DetectedOccupant_CandidateOccupant& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedOccupant_CandidateOccupant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectedOccupant_CandidateOccupant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedOccupant_CandidateOccupant* New() const final {
    return CreateMaybeMessage<DetectedOccupant_CandidateOccupant>(nullptr);
  }

  DetectedOccupant_CandidateOccupant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedOccupant_CandidateOccupant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedOccupant_CandidateOccupant& from);
  void MergeFrom(const DetectedOccupant_CandidateOccupant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedOccupant_CandidateOccupant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedOccupant.CandidateOccupant";
  }
  protected:
  explicit DetectedOccupant_CandidateOccupant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fdetectedoccupant_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClassificationFieldNumber = 2,
    kProbabilityFieldNumber = 1,
  };
  // .osi3.Occupant.Classification classification = 2;
  bool has_classification() const;
  private:
  bool _internal_has_classification() const;
  public:
  void clear_classification();
  const ::osi3::Occupant_Classification& classification() const;
  ::osi3::Occupant_Classification* release_classification();
  ::osi3::Occupant_Classification* mutable_classification();
  void set_allocated_classification(::osi3::Occupant_Classification* classification);
  private:
  const ::osi3::Occupant_Classification& _internal_classification() const;
  ::osi3::Occupant_Classification* _internal_mutable_classification();
  public:
  void unsafe_arena_set_allocated_classification(
      ::osi3::Occupant_Classification* classification);
  ::osi3::Occupant_Classification* unsafe_arena_release_classification();

  // double probability = 1;
  void clear_probability();
  double probability() const;
  void set_probability(double value);
  private:
  double _internal_probability() const;
  void _internal_set_probability(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.DetectedOccupant.CandidateOccupant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osi3::Occupant_Classification* classification_;
  double probability_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fdetectedoccupant_2eproto;
};
// -------------------------------------------------------------------

class DetectedOccupant PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.DetectedOccupant) */ {
 public:
  inline DetectedOccupant() : DetectedOccupant(nullptr) {}
  virtual ~DetectedOccupant();
  explicit constexpr DetectedOccupant(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DetectedOccupant(const DetectedOccupant& from);
  DetectedOccupant(DetectedOccupant&& from) noexcept
    : DetectedOccupant() {
    *this = ::std::move(from);
  }

  inline DetectedOccupant& operator=(const DetectedOccupant& from) {
    CopyFrom(from);
    return *this;
  }
  inline DetectedOccupant& operator=(DetectedOccupant&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DetectedOccupant& default_instance() {
    return *internal_default_instance();
  }
  static inline const DetectedOccupant* internal_default_instance() {
    return reinterpret_cast<const DetectedOccupant*>(
               &_DetectedOccupant_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DetectedOccupant& a, DetectedOccupant& b) {
    a.Swap(&b);
  }
  inline void Swap(DetectedOccupant* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DetectedOccupant* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DetectedOccupant* New() const final {
    return CreateMaybeMessage<DetectedOccupant>(nullptr);
  }

  DetectedOccupant* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DetectedOccupant>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DetectedOccupant& from);
  void MergeFrom(const DetectedOccupant& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DetectedOccupant* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.DetectedOccupant";
  }
  protected:
  explicit DetectedOccupant(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fdetectedoccupant_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  typedef DetectedOccupant_CandidateOccupant CandidateOccupant;

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // repeated .osi3.DetectedOccupant.CandidateOccupant candidate = 2;
  int candidate_size() const;
  private:
  int _internal_candidate_size() const;
  public:
  void clear_candidate();
  ::osi3::DetectedOccupant_CandidateOccupant* mutable_candidate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedOccupant_CandidateOccupant >*
      mutable_candidate();
  private:
  const ::osi3::DetectedOccupant_CandidateOccupant& _internal_candidate(int index) const;
  ::osi3::DetectedOccupant_CandidateOccupant* _internal_add_candidate();
  public:
  const ::osi3::DetectedOccupant_CandidateOccupant& candidate(int index) const;
  ::osi3::DetectedOccupant_CandidateOccupant* add_candidate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedOccupant_CandidateOccupant >&
      candidate() const;

  // .osi3.DetectedItemHeader header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::osi3::DetectedItemHeader& header() const;
  ::osi3::DetectedItemHeader* release_header();
  ::osi3::DetectedItemHeader* mutable_header();
  void set_allocated_header(::osi3::DetectedItemHeader* header);
  private:
  const ::osi3::DetectedItemHeader& _internal_header() const;
  ::osi3::DetectedItemHeader* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::osi3::DetectedItemHeader* header);
  ::osi3::DetectedItemHeader* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:osi3.DetectedOccupant)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedOccupant_CandidateOccupant > candidate_;
  ::osi3::DetectedItemHeader* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fdetectedoccupant_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DetectedOccupant_CandidateOccupant

// double probability = 1;
inline void DetectedOccupant_CandidateOccupant::clear_probability() {
  probability_ = 0;
}
inline double DetectedOccupant_CandidateOccupant::_internal_probability() const {
  return probability_;
}
inline double DetectedOccupant_CandidateOccupant::probability() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedOccupant.CandidateOccupant.probability)
  return _internal_probability();
}
inline void DetectedOccupant_CandidateOccupant::_internal_set_probability(double value) {
  
  probability_ = value;
}
inline void DetectedOccupant_CandidateOccupant::set_probability(double value) {
  _internal_set_probability(value);
  // @@protoc_insertion_point(field_set:osi3.DetectedOccupant.CandidateOccupant.probability)
}

// .osi3.Occupant.Classification classification = 2;
inline bool DetectedOccupant_CandidateOccupant::_internal_has_classification() const {
  return this != internal_default_instance() && classification_ != nullptr;
}
inline bool DetectedOccupant_CandidateOccupant::has_classification() const {
  return _internal_has_classification();
}
inline const ::osi3::Occupant_Classification& DetectedOccupant_CandidateOccupant::_internal_classification() const {
  const ::osi3::Occupant_Classification* p = classification_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Occupant_Classification&>(
      ::osi3::_Occupant_Classification_default_instance_);
}
inline const ::osi3::Occupant_Classification& DetectedOccupant_CandidateOccupant::classification() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedOccupant.CandidateOccupant.classification)
  return _internal_classification();
}
inline void DetectedOccupant_CandidateOccupant::unsafe_arena_set_allocated_classification(
    ::osi3::Occupant_Classification* classification) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification_);
  }
  classification_ = classification;
  if (classification) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.DetectedOccupant.CandidateOccupant.classification)
}
inline ::osi3::Occupant_Classification* DetectedOccupant_CandidateOccupant::release_classification() {
  
  ::osi3::Occupant_Classification* temp = classification_;
  classification_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Occupant_Classification* DetectedOccupant_CandidateOccupant::unsafe_arena_release_classification() {
  // @@protoc_insertion_point(field_release:osi3.DetectedOccupant.CandidateOccupant.classification)
  
  ::osi3::Occupant_Classification* temp = classification_;
  classification_ = nullptr;
  return temp;
}
inline ::osi3::Occupant_Classification* DetectedOccupant_CandidateOccupant::_internal_mutable_classification() {
  
  if (classification_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Occupant_Classification>(GetArena());
    classification_ = p;
  }
  return classification_;
}
inline ::osi3::Occupant_Classification* DetectedOccupant_CandidateOccupant::mutable_classification() {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedOccupant.CandidateOccupant.classification)
  return _internal_mutable_classification();
}
inline void DetectedOccupant_CandidateOccupant::set_allocated_classification(::osi3::Occupant_Classification* classification) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification_);
  }
  if (classification) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(classification)->GetArena();
    if (message_arena != submessage_arena) {
      classification = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, classification, submessage_arena);
    }
    
  } else {
    
  }
  classification_ = classification;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedOccupant.CandidateOccupant.classification)
}

// -------------------------------------------------------------------

// DetectedOccupant

// .osi3.DetectedItemHeader header = 1;
inline bool DetectedOccupant::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool DetectedOccupant::has_header() const {
  return _internal_has_header();
}
inline const ::osi3::DetectedItemHeader& DetectedOccupant::_internal_header() const {
  const ::osi3::DetectedItemHeader* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::DetectedItemHeader&>(
      ::osi3::_DetectedItemHeader_default_instance_);
}
inline const ::osi3::DetectedItemHeader& DetectedOccupant::header() const {
  // @@protoc_insertion_point(field_get:osi3.DetectedOccupant.header)
  return _internal_header();
}
inline void DetectedOccupant::unsafe_arena_set_allocated_header(
    ::osi3::DetectedItemHeader* header) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.DetectedOccupant.header)
}
inline ::osi3::DetectedItemHeader* DetectedOccupant::release_header() {
  
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::DetectedItemHeader* DetectedOccupant::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:osi3.DetectedOccupant.header)
  
  ::osi3::DetectedItemHeader* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::osi3::DetectedItemHeader* DetectedOccupant::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::DetectedItemHeader>(GetArena());
    header_ = p;
  }
  return header_;
}
inline ::osi3::DetectedItemHeader* DetectedOccupant::mutable_header() {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedOccupant.header)
  return _internal_mutable_header();
}
inline void DetectedOccupant::set_allocated_header(::osi3::DetectedItemHeader* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header)->GetArena();
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:osi3.DetectedOccupant.header)
}

// repeated .osi3.DetectedOccupant.CandidateOccupant candidate = 2;
inline int DetectedOccupant::_internal_candidate_size() const {
  return candidate_.size();
}
inline int DetectedOccupant::candidate_size() const {
  return _internal_candidate_size();
}
inline void DetectedOccupant::clear_candidate() {
  candidate_.Clear();
}
inline ::osi3::DetectedOccupant_CandidateOccupant* DetectedOccupant::mutable_candidate(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.DetectedOccupant.candidate)
  return candidate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedOccupant_CandidateOccupant >*
DetectedOccupant::mutable_candidate() {
  // @@protoc_insertion_point(field_mutable_list:osi3.DetectedOccupant.candidate)
  return &candidate_;
}
inline const ::osi3::DetectedOccupant_CandidateOccupant& DetectedOccupant::_internal_candidate(int index) const {
  return candidate_.Get(index);
}
inline const ::osi3::DetectedOccupant_CandidateOccupant& DetectedOccupant::candidate(int index) const {
  // @@protoc_insertion_point(field_get:osi3.DetectedOccupant.candidate)
  return _internal_candidate(index);
}
inline ::osi3::DetectedOccupant_CandidateOccupant* DetectedOccupant::_internal_add_candidate() {
  return candidate_.Add();
}
inline ::osi3::DetectedOccupant_CandidateOccupant* DetectedOccupant::add_candidate() {
  // @@protoc_insertion_point(field_add:osi3.DetectedOccupant.candidate)
  return _internal_add_candidate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::DetectedOccupant_CandidateOccupant >&
DetectedOccupant::candidate() const {
  // @@protoc_insertion_point(field_list:osi3.DetectedOccupant.candidate)
  return candidate_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fdetectedoccupant_2eproto
