// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fcommon_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fcommon_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_osi_5fcommon_2eproto_metadata_getter(int index);
namespace osi3 {
class BaseMoving;
struct BaseMovingDefaultTypeInternal;
extern BaseMovingDefaultTypeInternal _BaseMoving_default_instance_;
class BaseStationary;
struct BaseStationaryDefaultTypeInternal;
extern BaseStationaryDefaultTypeInternal _BaseStationary_default_instance_;
class ColorCMYK;
struct ColorCMYKDefaultTypeInternal;
extern ColorCMYKDefaultTypeInternal _ColorCMYK_default_instance_;
class ColorDescription;
struct ColorDescriptionDefaultTypeInternal;
extern ColorDescriptionDefaultTypeInternal _ColorDescription_default_instance_;
class ColorGrey;
struct ColorGreyDefaultTypeInternal;
extern ColorGreyDefaultTypeInternal _ColorGrey_default_instance_;
class ColorHSV;
struct ColorHSVDefaultTypeInternal;
extern ColorHSVDefaultTypeInternal _ColorHSV_default_instance_;
class ColorLUV;
struct ColorLUVDefaultTypeInternal;
extern ColorLUVDefaultTypeInternal _ColorLUV_default_instance_;
class ColorRGB;
struct ColorRGBDefaultTypeInternal;
extern ColorRGBDefaultTypeInternal _ColorRGB_default_instance_;
class ColorRGBIR;
struct ColorRGBIRDefaultTypeInternal;
extern ColorRGBIRDefaultTypeInternal _ColorRGBIR_default_instance_;
class Dimension3d;
struct Dimension3dDefaultTypeInternal;
extern Dimension3dDefaultTypeInternal _Dimension3d_default_instance_;
class ExternalReference;
struct ExternalReferenceDefaultTypeInternal;
extern ExternalReferenceDefaultTypeInternal _ExternalReference_default_instance_;
class GeodeticPosition;
struct GeodeticPositionDefaultTypeInternal;
extern GeodeticPositionDefaultTypeInternal _GeodeticPosition_default_instance_;
class Identifier;
struct IdentifierDefaultTypeInternal;
extern IdentifierDefaultTypeInternal _Identifier_default_instance_;
class KeyValuePair;
struct KeyValuePairDefaultTypeInternal;
extern KeyValuePairDefaultTypeInternal _KeyValuePair_default_instance_;
class LogicalLaneAssignment;
struct LogicalLaneAssignmentDefaultTypeInternal;
extern LogicalLaneAssignmentDefaultTypeInternal _LogicalLaneAssignment_default_instance_;
class MountingPosition;
struct MountingPositionDefaultTypeInternal;
extern MountingPositionDefaultTypeInternal _MountingPosition_default_instance_;
class Orientation3d;
struct Orientation3dDefaultTypeInternal;
extern Orientation3dDefaultTypeInternal _Orientation3d_default_instance_;
class Pedalry;
struct PedalryDefaultTypeInternal;
extern PedalryDefaultTypeInternal _Pedalry_default_instance_;
class SpatialSignalStrength;
struct SpatialSignalStrengthDefaultTypeInternal;
extern SpatialSignalStrengthDefaultTypeInternal _SpatialSignalStrength_default_instance_;
class Spherical3d;
struct Spherical3dDefaultTypeInternal;
extern Spherical3dDefaultTypeInternal _Spherical3d_default_instance_;
class StatePoint;
struct StatePointDefaultTypeInternal;
extern StatePointDefaultTypeInternal _StatePoint_default_instance_;
class Timestamp;
struct TimestampDefaultTypeInternal;
extern TimestampDefaultTypeInternal _Timestamp_default_instance_;
class Vector2d;
struct Vector2dDefaultTypeInternal;
extern Vector2dDefaultTypeInternal _Vector2d_default_instance_;
class Vector3d;
struct Vector3dDefaultTypeInternal;
extern Vector3dDefaultTypeInternal _Vector3d_default_instance_;
class VehicleSteeringWheel;
struct VehicleSteeringWheelDefaultTypeInternal;
extern VehicleSteeringWheelDefaultTypeInternal _VehicleSteeringWheel_default_instance_;
class WavelengthData;
struct WavelengthDataDefaultTypeInternal;
extern WavelengthDataDefaultTypeInternal _WavelengthData_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::BaseMoving* Arena::CreateMaybeMessage<::osi3::BaseMoving>(Arena*);
template<> ::osi3::BaseStationary* Arena::CreateMaybeMessage<::osi3::BaseStationary>(Arena*);
template<> ::osi3::ColorCMYK* Arena::CreateMaybeMessage<::osi3::ColorCMYK>(Arena*);
template<> ::osi3::ColorDescription* Arena::CreateMaybeMessage<::osi3::ColorDescription>(Arena*);
template<> ::osi3::ColorGrey* Arena::CreateMaybeMessage<::osi3::ColorGrey>(Arena*);
template<> ::osi3::ColorHSV* Arena::CreateMaybeMessage<::osi3::ColorHSV>(Arena*);
template<> ::osi3::ColorLUV* Arena::CreateMaybeMessage<::osi3::ColorLUV>(Arena*);
template<> ::osi3::ColorRGB* Arena::CreateMaybeMessage<::osi3::ColorRGB>(Arena*);
template<> ::osi3::ColorRGBIR* Arena::CreateMaybeMessage<::osi3::ColorRGBIR>(Arena*);
template<> ::osi3::Dimension3d* Arena::CreateMaybeMessage<::osi3::Dimension3d>(Arena*);
template<> ::osi3::ExternalReference* Arena::CreateMaybeMessage<::osi3::ExternalReference>(Arena*);
template<> ::osi3::GeodeticPosition* Arena::CreateMaybeMessage<::osi3::GeodeticPosition>(Arena*);
template<> ::osi3::Identifier* Arena::CreateMaybeMessage<::osi3::Identifier>(Arena*);
template<> ::osi3::KeyValuePair* Arena::CreateMaybeMessage<::osi3::KeyValuePair>(Arena*);
template<> ::osi3::LogicalLaneAssignment* Arena::CreateMaybeMessage<::osi3::LogicalLaneAssignment>(Arena*);
template<> ::osi3::MountingPosition* Arena::CreateMaybeMessage<::osi3::MountingPosition>(Arena*);
template<> ::osi3::Orientation3d* Arena::CreateMaybeMessage<::osi3::Orientation3d>(Arena*);
template<> ::osi3::Pedalry* Arena::CreateMaybeMessage<::osi3::Pedalry>(Arena*);
template<> ::osi3::SpatialSignalStrength* Arena::CreateMaybeMessage<::osi3::SpatialSignalStrength>(Arena*);
template<> ::osi3::Spherical3d* Arena::CreateMaybeMessage<::osi3::Spherical3d>(Arena*);
template<> ::osi3::StatePoint* Arena::CreateMaybeMessage<::osi3::StatePoint>(Arena*);
template<> ::osi3::Timestamp* Arena::CreateMaybeMessage<::osi3::Timestamp>(Arena*);
template<> ::osi3::Vector2d* Arena::CreateMaybeMessage<::osi3::Vector2d>(Arena*);
template<> ::osi3::Vector3d* Arena::CreateMaybeMessage<::osi3::Vector3d>(Arena*);
template<> ::osi3::VehicleSteeringWheel* Arena::CreateMaybeMessage<::osi3::VehicleSteeringWheel>(Arena*);
template<> ::osi3::WavelengthData* Arena::CreateMaybeMessage<::osi3::WavelengthData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class Vector3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Vector3d) */ {
 public:
  inline Vector3d() : Vector3d(nullptr) {}
  virtual ~Vector3d();
  explicit constexpr Vector3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3d(const Vector3d& from);
  Vector3d(Vector3d&& from) noexcept
    : Vector3d() {
    *this = ::std::move(from);
  }

  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3d& operator=(Vector3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3d* internal_default_instance() {
    return reinterpret_cast<const Vector3d*>(
               &_Vector3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector3d& a, Vector3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3d* New() const final {
    return CreateMaybeMessage<Vector3d>(nullptr);
  }

  Vector3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Vector3d";
  }
  protected:
  explicit Vector3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3;
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Vector3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Vector2d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Vector2d) */ {
 public:
  inline Vector2d() : Vector2d(nullptr) {}
  virtual ~Vector2d();
  explicit constexpr Vector2d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2d(const Vector2d& from);
  Vector2d(Vector2d&& from) noexcept
    : Vector2d() {
    *this = ::std::move(from);
  }

  inline Vector2d& operator=(const Vector2d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2d& operator=(Vector2d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2d* internal_default_instance() {
    return reinterpret_cast<const Vector2d*>(
               &_Vector2d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2d& a, Vector2d& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2d* New() const final {
    return CreateMaybeMessage<Vector2d>(nullptr);
  }

  Vector2d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2d& from);
  void MergeFrom(const Vector2d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Vector2d";
  }
  protected:
  explicit Vector2d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // double x = 1;
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2;
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Vector2d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Timestamp PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Timestamp) */ {
 public:
  inline Timestamp() : Timestamp(nullptr) {}
  virtual ~Timestamp();
  explicit constexpr Timestamp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Timestamp(const Timestamp& from);
  Timestamp(Timestamp&& from) noexcept
    : Timestamp() {
    *this = ::std::move(from);
  }

  inline Timestamp& operator=(const Timestamp& from) {
    CopyFrom(from);
    return *this;
  }
  inline Timestamp& operator=(Timestamp&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Timestamp& default_instance() {
    return *internal_default_instance();
  }
  static inline const Timestamp* internal_default_instance() {
    return reinterpret_cast<const Timestamp*>(
               &_Timestamp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Timestamp& a, Timestamp& b) {
    a.Swap(&b);
  }
  inline void Swap(Timestamp* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Timestamp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Timestamp* New() const final {
    return CreateMaybeMessage<Timestamp>(nullptr);
  }

  Timestamp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Timestamp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Timestamp& from);
  void MergeFrom(const Timestamp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Timestamp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Timestamp";
  }
  protected:
  explicit Timestamp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecondsFieldNumber = 1,
    kNanosFieldNumber = 2,
  };
  // int64 seconds = 1;
  void clear_seconds();
  ::PROTOBUF_NAMESPACE_ID::int64 seconds() const;
  void set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_seconds() const;
  void _internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // uint32 nanos = 2;
  void clear_nanos();
  ::PROTOBUF_NAMESPACE_ID::uint32 nanos() const;
  void set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nanos() const;
  void _internal_set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Timestamp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 seconds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nanos_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Dimension3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Dimension3d) */ {
 public:
  inline Dimension3d() : Dimension3d(nullptr) {}
  virtual ~Dimension3d();
  explicit constexpr Dimension3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Dimension3d(const Dimension3d& from);
  Dimension3d(Dimension3d&& from) noexcept
    : Dimension3d() {
    *this = ::std::move(from);
  }

  inline Dimension3d& operator=(const Dimension3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dimension3d& operator=(Dimension3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dimension3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Dimension3d* internal_default_instance() {
    return reinterpret_cast<const Dimension3d*>(
               &_Dimension3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Dimension3d& a, Dimension3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Dimension3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dimension3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dimension3d* New() const final {
    return CreateMaybeMessage<Dimension3d>(nullptr);
  }

  Dimension3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dimension3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dimension3d& from);
  void MergeFrom(const Dimension3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dimension3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Dimension3d";
  }
  protected:
  explicit Dimension3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLengthFieldNumber = 1,
    kWidthFieldNumber = 2,
    kHeightFieldNumber = 3,
  };
  // double length = 1;
  void clear_length();
  double length() const;
  void set_length(double value);
  private:
  double _internal_length() const;
  void _internal_set_length(double value);
  public:

  // double width = 2;
  void clear_width();
  double width() const;
  void set_width(double value);
  private:
  double _internal_width() const;
  void _internal_set_width(double value);
  public:

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Dimension3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double length_;
  double width_;
  double height_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Orientation3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Orientation3d) */ {
 public:
  inline Orientation3d() : Orientation3d(nullptr) {}
  virtual ~Orientation3d();
  explicit constexpr Orientation3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orientation3d(const Orientation3d& from);
  Orientation3d(Orientation3d&& from) noexcept
    : Orientation3d() {
    *this = ::std::move(from);
  }

  inline Orientation3d& operator=(const Orientation3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation3d& operator=(Orientation3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Orientation3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Orientation3d* internal_default_instance() {
    return reinterpret_cast<const Orientation3d*>(
               &_Orientation3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Orientation3d& a, Orientation3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Orientation3d* New() const final {
    return CreateMaybeMessage<Orientation3d>(nullptr);
  }

  Orientation3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Orientation3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Orientation3d& from);
  void MergeFrom(const Orientation3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Orientation3d";
  }
  protected:
  explicit Orientation3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollFieldNumber = 1,
    kPitchFieldNumber = 2,
    kYawFieldNumber = 3,
  };
  // double roll = 1;
  void clear_roll();
  double roll() const;
  void set_roll(double value);
  private:
  double _internal_roll() const;
  void _internal_set_roll(double value);
  public:

  // double pitch = 2;
  void clear_pitch();
  double pitch() const;
  void set_pitch(double value);
  private:
  double _internal_pitch() const;
  void _internal_set_pitch(double value);
  public:

  // double yaw = 3;
  void clear_yaw();
  double yaw() const;
  void set_yaw(double value);
  private:
  double _internal_yaw() const;
  void _internal_set_yaw(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Orientation3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double roll_;
  double pitch_;
  double yaw_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Identifier PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Identifier) */ {
 public:
  inline Identifier() : Identifier(nullptr) {}
  virtual ~Identifier();
  explicit constexpr Identifier(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Identifier(const Identifier& from);
  Identifier(Identifier&& from) noexcept
    : Identifier() {
    *this = ::std::move(from);
  }

  inline Identifier& operator=(const Identifier& from) {
    CopyFrom(from);
    return *this;
  }
  inline Identifier& operator=(Identifier&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Identifier& default_instance() {
    return *internal_default_instance();
  }
  static inline const Identifier* internal_default_instance() {
    return reinterpret_cast<const Identifier*>(
               &_Identifier_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Identifier& a, Identifier& b) {
    a.Swap(&b);
  }
  inline void Swap(Identifier* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Identifier* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Identifier* New() const final {
    return CreateMaybeMessage<Identifier>(nullptr);
  }

  Identifier* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Identifier>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Identifier& from);
  void MergeFrom(const Identifier& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Identifier* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Identifier";
  }
  protected:
  explicit Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // uint64 value = 1;
  void clear_value();
  ::PROTOBUF_NAMESPACE_ID::uint64 value() const;
  void set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_value() const;
  void _internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Identifier)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint64 value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ExternalReference PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ExternalReference) */ {
 public:
  inline ExternalReference() : ExternalReference(nullptr) {}
  virtual ~ExternalReference();
  explicit constexpr ExternalReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExternalReference(const ExternalReference& from);
  ExternalReference(ExternalReference&& from) noexcept
    : ExternalReference() {
    *this = ::std::move(from);
  }

  inline ExternalReference& operator=(const ExternalReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExternalReference& operator=(ExternalReference&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExternalReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExternalReference* internal_default_instance() {
    return reinterpret_cast<const ExternalReference*>(
               &_ExternalReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ExternalReference& a, ExternalReference& b) {
    a.Swap(&b);
  }
  inline void Swap(ExternalReference* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExternalReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExternalReference* New() const final {
    return CreateMaybeMessage<ExternalReference>(nullptr);
  }

  ExternalReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExternalReference>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExternalReference& from);
  void MergeFrom(const ExternalReference& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExternalReference* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ExternalReference";
  }
  protected:
  explicit ExternalReference(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 3,
    kReferenceFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated string identifier = 3;
  int identifier_size() const;
  private:
  int _internal_identifier_size() const;
  public:
  void clear_identifier();
  const std::string& identifier(int index) const;
  std::string* mutable_identifier(int index);
  void set_identifier(int index, const std::string& value);
  void set_identifier(int index, std::string&& value);
  void set_identifier(int index, const char* value);
  void set_identifier(int index, const char* value, size_t size);
  std::string* add_identifier();
  void add_identifier(const std::string& value);
  void add_identifier(std::string&& value);
  void add_identifier(const char* value);
  void add_identifier(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& identifier() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_identifier();
  private:
  const std::string& _internal_identifier(int index) const;
  std::string* _internal_add_identifier();
  public:

  // string reference = 1;
  void clear_reference();
  const std::string& reference() const;
  void set_reference(const std::string& value);
  void set_reference(std::string&& value);
  void set_reference(const char* value);
  void set_reference(const char* value, size_t size);
  std::string* mutable_reference();
  std::string* release_reference();
  void set_allocated_reference(std::string* reference);
  private:
  const std::string& _internal_reference() const;
  void _internal_set_reference(const std::string& value);
  std::string* _internal_mutable_reference();
  public:

  // string type = 2;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:osi3.ExternalReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> identifier_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class MountingPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.MountingPosition) */ {
 public:
  inline MountingPosition() : MountingPosition(nullptr) {}
  virtual ~MountingPosition();
  explicit constexpr MountingPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MountingPosition(const MountingPosition& from);
  MountingPosition(MountingPosition&& from) noexcept
    : MountingPosition() {
    *this = ::std::move(from);
  }

  inline MountingPosition& operator=(const MountingPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline MountingPosition& operator=(MountingPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MountingPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const MountingPosition* internal_default_instance() {
    return reinterpret_cast<const MountingPosition*>(
               &_MountingPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MountingPosition& a, MountingPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(MountingPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MountingPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MountingPosition* New() const final {
    return CreateMaybeMessage<MountingPosition>(nullptr);
  }

  MountingPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MountingPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MountingPosition& from);
  void MergeFrom(const MountingPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MountingPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.MountingPosition";
  }
  protected:
  explicit MountingPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kOrientationFieldNumber = 2,
  };
  // .osi3.Vector3d position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::osi3::Vector3d* position);
  ::osi3::Vector3d* unsafe_arena_release_position();

  // .osi3.Orientation3d orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::osi3::Orientation3d* orientation);
  ::osi3::Orientation3d* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:osi3.MountingPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Spherical3d PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Spherical3d) */ {
 public:
  inline Spherical3d() : Spherical3d(nullptr) {}
  virtual ~Spherical3d();
  explicit constexpr Spherical3d(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Spherical3d(const Spherical3d& from);
  Spherical3d(Spherical3d&& from) noexcept
    : Spherical3d() {
    *this = ::std::move(from);
  }

  inline Spherical3d& operator=(const Spherical3d& from) {
    CopyFrom(from);
    return *this;
  }
  inline Spherical3d& operator=(Spherical3d&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Spherical3d& default_instance() {
    return *internal_default_instance();
  }
  static inline const Spherical3d* internal_default_instance() {
    return reinterpret_cast<const Spherical3d*>(
               &_Spherical3d_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Spherical3d& a, Spherical3d& b) {
    a.Swap(&b);
  }
  inline void Swap(Spherical3d* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Spherical3d* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Spherical3d* New() const final {
    return CreateMaybeMessage<Spherical3d>(nullptr);
  }

  Spherical3d* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Spherical3d>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Spherical3d& from);
  void MergeFrom(const Spherical3d& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Spherical3d* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Spherical3d";
  }
  protected:
  explicit Spherical3d(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDistanceFieldNumber = 1,
    kAzimuthFieldNumber = 2,
    kElevationFieldNumber = 3,
  };
  // double distance = 1;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // double azimuth = 2;
  void clear_azimuth();
  double azimuth() const;
  void set_azimuth(double value);
  private:
  double _internal_azimuth() const;
  void _internal_set_azimuth(double value);
  public:

  // double elevation = 3;
  void clear_elevation();
  double elevation() const;
  void set_elevation(double value);
  private:
  double _internal_elevation() const;
  void _internal_set_elevation(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Spherical3d)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double distance_;
  double azimuth_;
  double elevation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class LogicalLaneAssignment PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.LogicalLaneAssignment) */ {
 public:
  inline LogicalLaneAssignment() : LogicalLaneAssignment(nullptr) {}
  virtual ~LogicalLaneAssignment();
  explicit constexpr LogicalLaneAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LogicalLaneAssignment(const LogicalLaneAssignment& from);
  LogicalLaneAssignment(LogicalLaneAssignment&& from) noexcept
    : LogicalLaneAssignment() {
    *this = ::std::move(from);
  }

  inline LogicalLaneAssignment& operator=(const LogicalLaneAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogicalLaneAssignment& operator=(LogicalLaneAssignment&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogicalLaneAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const LogicalLaneAssignment* internal_default_instance() {
    return reinterpret_cast<const LogicalLaneAssignment*>(
               &_LogicalLaneAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(LogicalLaneAssignment& a, LogicalLaneAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(LogicalLaneAssignment* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LogicalLaneAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogicalLaneAssignment* New() const final {
    return CreateMaybeMessage<LogicalLaneAssignment>(nullptr);
  }

  LogicalLaneAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogicalLaneAssignment>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogicalLaneAssignment& from);
  void MergeFrom(const LogicalLaneAssignment& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogicalLaneAssignment* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.LogicalLaneAssignment";
  }
  protected:
  explicit LogicalLaneAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignedLaneIdFieldNumber = 1,
    kSPositionFieldNumber = 2,
    kTPositionFieldNumber = 3,
    kAngleToLaneFieldNumber = 4,
  };
  // .osi3.Identifier assigned_lane_id = 1;
  bool has_assigned_lane_id() const;
  private:
  bool _internal_has_assigned_lane_id() const;
  public:
  void clear_assigned_lane_id();
  const ::osi3::Identifier& assigned_lane_id() const;
  ::osi3::Identifier* release_assigned_lane_id();
  ::osi3::Identifier* mutable_assigned_lane_id();
  void set_allocated_assigned_lane_id(::osi3::Identifier* assigned_lane_id);
  private:
  const ::osi3::Identifier& _internal_assigned_lane_id() const;
  ::osi3::Identifier* _internal_mutable_assigned_lane_id();
  public:
  void unsafe_arena_set_allocated_assigned_lane_id(
      ::osi3::Identifier* assigned_lane_id);
  ::osi3::Identifier* unsafe_arena_release_assigned_lane_id();

  // double s_position = 2;
  void clear_s_position();
  double s_position() const;
  void set_s_position(double value);
  private:
  double _internal_s_position() const;
  void _internal_set_s_position(double value);
  public:

  // double t_position = 3;
  void clear_t_position();
  double t_position() const;
  void set_t_position(double value);
  private:
  double _internal_t_position() const;
  void _internal_set_t_position(double value);
  public:

  // double angle_to_lane = 4;
  void clear_angle_to_lane();
  double angle_to_lane() const;
  void set_angle_to_lane(double value);
  private:
  double _internal_angle_to_lane() const;
  void _internal_set_angle_to_lane(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.LogicalLaneAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osi3::Identifier* assigned_lane_id_;
  double s_position_;
  double t_position_;
  double angle_to_lane_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class BaseStationary PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.BaseStationary) */ {
 public:
  inline BaseStationary() : BaseStationary(nullptr) {}
  virtual ~BaseStationary();
  explicit constexpr BaseStationary(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseStationary(const BaseStationary& from);
  BaseStationary(BaseStationary&& from) noexcept
    : BaseStationary() {
    *this = ::std::move(from);
  }

  inline BaseStationary& operator=(const BaseStationary& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseStationary& operator=(BaseStationary&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseStationary& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseStationary* internal_default_instance() {
    return reinterpret_cast<const BaseStationary*>(
               &_BaseStationary_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BaseStationary& a, BaseStationary& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseStationary* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseStationary* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseStationary* New() const final {
    return CreateMaybeMessage<BaseStationary>(nullptr);
  }

  BaseStationary* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseStationary>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseStationary& from);
  void MergeFrom(const BaseStationary& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseStationary* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.BaseStationary";
  }
  protected:
  explicit BaseStationary(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasePolygonFieldNumber = 4,
    kDimensionFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
  };
  // repeated .osi3.Vector2d base_polygon = 4;
  int base_polygon_size() const;
  private:
  int _internal_base_polygon_size() const;
  public:
  void clear_base_polygon();
  ::osi3::Vector2d* mutable_base_polygon(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >*
      mutable_base_polygon();
  private:
  const ::osi3::Vector2d& _internal_base_polygon(int index) const;
  ::osi3::Vector2d* _internal_add_base_polygon();
  public:
  const ::osi3::Vector2d& base_polygon(int index) const;
  ::osi3::Vector2d* add_base_polygon();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >&
      base_polygon() const;

  // .osi3.Dimension3d dimension = 1;
  bool has_dimension() const;
  private:
  bool _internal_has_dimension() const;
  public:
  void clear_dimension();
  const ::osi3::Dimension3d& dimension() const;
  ::osi3::Dimension3d* release_dimension();
  ::osi3::Dimension3d* mutable_dimension();
  void set_allocated_dimension(::osi3::Dimension3d* dimension);
  private:
  const ::osi3::Dimension3d& _internal_dimension() const;
  ::osi3::Dimension3d* _internal_mutable_dimension();
  public:
  void unsafe_arena_set_allocated_dimension(
      ::osi3::Dimension3d* dimension);
  ::osi3::Dimension3d* unsafe_arena_release_dimension();

  // .osi3.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::osi3::Vector3d* position);
  ::osi3::Vector3d* unsafe_arena_release_position();

  // .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::osi3::Orientation3d* orientation);
  ::osi3::Orientation3d* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:osi3.BaseStationary)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d > base_polygon_;
  ::osi3::Dimension3d* dimension_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class BaseMoving PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.BaseMoving) */ {
 public:
  inline BaseMoving() : BaseMoving(nullptr) {}
  virtual ~BaseMoving();
  explicit constexpr BaseMoving(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BaseMoving(const BaseMoving& from);
  BaseMoving(BaseMoving&& from) noexcept
    : BaseMoving() {
    *this = ::std::move(from);
  }

  inline BaseMoving& operator=(const BaseMoving& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseMoving& operator=(BaseMoving&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseMoving& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseMoving* internal_default_instance() {
    return reinterpret_cast<const BaseMoving*>(
               &_BaseMoving_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BaseMoving& a, BaseMoving& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseMoving* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseMoving* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseMoving* New() const final {
    return CreateMaybeMessage<BaseMoving>(nullptr);
  }

  BaseMoving* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseMoving>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseMoving& from);
  void MergeFrom(const BaseMoving& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseMoving* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.BaseMoving";
  }
  protected:
  explicit BaseMoving(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBasePolygonFieldNumber = 7,
    kDimensionFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kVelocityFieldNumber = 4,
    kAccelerationFieldNumber = 5,
    kOrientationRateFieldNumber = 6,
    kOrientationAccelerationFieldNumber = 8,
  };
  // repeated .osi3.Vector2d base_polygon = 7;
  int base_polygon_size() const;
  private:
  int _internal_base_polygon_size() const;
  public:
  void clear_base_polygon();
  ::osi3::Vector2d* mutable_base_polygon(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >*
      mutable_base_polygon();
  private:
  const ::osi3::Vector2d& _internal_base_polygon(int index) const;
  ::osi3::Vector2d* _internal_add_base_polygon();
  public:
  const ::osi3::Vector2d& base_polygon(int index) const;
  ::osi3::Vector2d* add_base_polygon();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >&
      base_polygon() const;

  // .osi3.Dimension3d dimension = 1;
  bool has_dimension() const;
  private:
  bool _internal_has_dimension() const;
  public:
  void clear_dimension();
  const ::osi3::Dimension3d& dimension() const;
  ::osi3::Dimension3d* release_dimension();
  ::osi3::Dimension3d* mutable_dimension();
  void set_allocated_dimension(::osi3::Dimension3d* dimension);
  private:
  const ::osi3::Dimension3d& _internal_dimension() const;
  ::osi3::Dimension3d* _internal_mutable_dimension();
  public:
  void unsafe_arena_set_allocated_dimension(
      ::osi3::Dimension3d* dimension);
  ::osi3::Dimension3d* unsafe_arena_release_dimension();

  // .osi3.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::osi3::Vector3d* position);
  ::osi3::Vector3d* unsafe_arena_release_position();

  // .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::osi3::Orientation3d* orientation);
  ::osi3::Orientation3d* unsafe_arena_release_orientation();

  // .osi3.Vector3d velocity = 4;
  bool has_velocity() const;
  private:
  bool _internal_has_velocity() const;
  public:
  void clear_velocity();
  const ::osi3::Vector3d& velocity() const;
  ::osi3::Vector3d* release_velocity();
  ::osi3::Vector3d* mutable_velocity();
  void set_allocated_velocity(::osi3::Vector3d* velocity);
  private:
  const ::osi3::Vector3d& _internal_velocity() const;
  ::osi3::Vector3d* _internal_mutable_velocity();
  public:
  void unsafe_arena_set_allocated_velocity(
      ::osi3::Vector3d* velocity);
  ::osi3::Vector3d* unsafe_arena_release_velocity();

  // .osi3.Vector3d acceleration = 5;
  bool has_acceleration() const;
  private:
  bool _internal_has_acceleration() const;
  public:
  void clear_acceleration();
  const ::osi3::Vector3d& acceleration() const;
  ::osi3::Vector3d* release_acceleration();
  ::osi3::Vector3d* mutable_acceleration();
  void set_allocated_acceleration(::osi3::Vector3d* acceleration);
  private:
  const ::osi3::Vector3d& _internal_acceleration() const;
  ::osi3::Vector3d* _internal_mutable_acceleration();
  public:
  void unsafe_arena_set_allocated_acceleration(
      ::osi3::Vector3d* acceleration);
  ::osi3::Vector3d* unsafe_arena_release_acceleration();

  // .osi3.Orientation3d orientation_rate = 6;
  bool has_orientation_rate() const;
  private:
  bool _internal_has_orientation_rate() const;
  public:
  void clear_orientation_rate();
  const ::osi3::Orientation3d& orientation_rate() const;
  ::osi3::Orientation3d* release_orientation_rate();
  ::osi3::Orientation3d* mutable_orientation_rate();
  void set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate);
  private:
  const ::osi3::Orientation3d& _internal_orientation_rate() const;
  ::osi3::Orientation3d* _internal_mutable_orientation_rate();
  public:
  void unsafe_arena_set_allocated_orientation_rate(
      ::osi3::Orientation3d* orientation_rate);
  ::osi3::Orientation3d* unsafe_arena_release_orientation_rate();

  // .osi3.Orientation3d orientation_acceleration = 8;
  bool has_orientation_acceleration() const;
  private:
  bool _internal_has_orientation_acceleration() const;
  public:
  void clear_orientation_acceleration();
  const ::osi3::Orientation3d& orientation_acceleration() const;
  ::osi3::Orientation3d* release_orientation_acceleration();
  ::osi3::Orientation3d* mutable_orientation_acceleration();
  void set_allocated_orientation_acceleration(::osi3::Orientation3d* orientation_acceleration);
  private:
  const ::osi3::Orientation3d& _internal_orientation_acceleration() const;
  ::osi3::Orientation3d* _internal_mutable_orientation_acceleration();
  public:
  void unsafe_arena_set_allocated_orientation_acceleration(
      ::osi3::Orientation3d* orientation_acceleration);
  ::osi3::Orientation3d* unsafe_arena_release_orientation_acceleration();

  // @@protoc_insertion_point(class_scope:osi3.BaseMoving)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d > base_polygon_;
  ::osi3::Dimension3d* dimension_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  ::osi3::Vector3d* velocity_;
  ::osi3::Vector3d* acceleration_;
  ::osi3::Orientation3d* orientation_rate_;
  ::osi3::Orientation3d* orientation_acceleration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class StatePoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.StatePoint) */ {
 public:
  inline StatePoint() : StatePoint(nullptr) {}
  virtual ~StatePoint();
  explicit constexpr StatePoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatePoint(const StatePoint& from);
  StatePoint(StatePoint&& from) noexcept
    : StatePoint() {
    *this = ::std::move(from);
  }

  inline StatePoint& operator=(const StatePoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatePoint& operator=(StatePoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StatePoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatePoint* internal_default_instance() {
    return reinterpret_cast<const StatePoint*>(
               &_StatePoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StatePoint& a, StatePoint& b) {
    a.Swap(&b);
  }
  inline void Swap(StatePoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatePoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StatePoint* New() const final {
    return CreateMaybeMessage<StatePoint>(nullptr);
  }

  StatePoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StatePoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StatePoint& from);
  void MergeFrom(const StatePoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatePoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.StatePoint";
  }
  protected:
  explicit StatePoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 1,
    kPositionFieldNumber = 2,
    kOrientationFieldNumber = 3,
  };
  // .osi3.Timestamp timestamp = 1;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const ::osi3::Timestamp& timestamp() const;
  ::osi3::Timestamp* release_timestamp();
  ::osi3::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::osi3::Timestamp* timestamp);
  private:
  const ::osi3::Timestamp& _internal_timestamp() const;
  ::osi3::Timestamp* _internal_mutable_timestamp();
  public:
  void unsafe_arena_set_allocated_timestamp(
      ::osi3::Timestamp* timestamp);
  ::osi3::Timestamp* unsafe_arena_release_timestamp();

  // .osi3.Vector3d position = 2;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::osi3::Vector3d& position() const;
  ::osi3::Vector3d* release_position();
  ::osi3::Vector3d* mutable_position();
  void set_allocated_position(::osi3::Vector3d* position);
  private:
  const ::osi3::Vector3d& _internal_position() const;
  ::osi3::Vector3d* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::osi3::Vector3d* position);
  ::osi3::Vector3d* unsafe_arena_release_position();

  // .osi3.Orientation3d orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::osi3::Orientation3d& orientation() const;
  ::osi3::Orientation3d* release_orientation();
  ::osi3::Orientation3d* mutable_orientation();
  void set_allocated_orientation(::osi3::Orientation3d* orientation);
  private:
  const ::osi3::Orientation3d& _internal_orientation() const;
  ::osi3::Orientation3d* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::osi3::Orientation3d* orientation);
  ::osi3::Orientation3d* unsafe_arena_release_orientation();

  // @@protoc_insertion_point(class_scope:osi3.StatePoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osi3::Timestamp* timestamp_;
  ::osi3::Vector3d* position_;
  ::osi3::Orientation3d* orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class WavelengthData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.WavelengthData) */ {
 public:
  inline WavelengthData() : WavelengthData(nullptr) {}
  virtual ~WavelengthData();
  explicit constexpr WavelengthData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WavelengthData(const WavelengthData& from);
  WavelengthData(WavelengthData&& from) noexcept
    : WavelengthData() {
    *this = ::std::move(from);
  }

  inline WavelengthData& operator=(const WavelengthData& from) {
    CopyFrom(from);
    return *this;
  }
  inline WavelengthData& operator=(WavelengthData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WavelengthData& default_instance() {
    return *internal_default_instance();
  }
  static inline const WavelengthData* internal_default_instance() {
    return reinterpret_cast<const WavelengthData*>(
               &_WavelengthData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(WavelengthData& a, WavelengthData& b) {
    a.Swap(&b);
  }
  inline void Swap(WavelengthData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WavelengthData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WavelengthData* New() const final {
    return CreateMaybeMessage<WavelengthData>(nullptr);
  }

  WavelengthData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WavelengthData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WavelengthData& from);
  void MergeFrom(const WavelengthData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WavelengthData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.WavelengthData";
  }
  protected:
  explicit WavelengthData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
    kSamplesNumberFieldNumber = 3,
  };
  // double start = 1;
  void clear_start();
  double start() const;
  void set_start(double value);
  private:
  double _internal_start() const;
  void _internal_set_start(double value);
  public:

  // double end = 2;
  void clear_end();
  double end() const;
  void set_end(double value);
  private:
  double _internal_end() const;
  void _internal_set_end(double value);
  public:

  // double samples_number = 3;
  void clear_samples_number();
  double samples_number() const;
  void set_samples_number(double value);
  private:
  double _internal_samples_number() const;
  void _internal_set_samples_number(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.WavelengthData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double start_;
  double end_;
  double samples_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class SpatialSignalStrength PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.SpatialSignalStrength) */ {
 public:
  inline SpatialSignalStrength() : SpatialSignalStrength(nullptr) {}
  virtual ~SpatialSignalStrength();
  explicit constexpr SpatialSignalStrength(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpatialSignalStrength(const SpatialSignalStrength& from);
  SpatialSignalStrength(SpatialSignalStrength&& from) noexcept
    : SpatialSignalStrength() {
    *this = ::std::move(from);
  }

  inline SpatialSignalStrength& operator=(const SpatialSignalStrength& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpatialSignalStrength& operator=(SpatialSignalStrength&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SpatialSignalStrength& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpatialSignalStrength* internal_default_instance() {
    return reinterpret_cast<const SpatialSignalStrength*>(
               &_SpatialSignalStrength_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(SpatialSignalStrength& a, SpatialSignalStrength& b) {
    a.Swap(&b);
  }
  inline void Swap(SpatialSignalStrength* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpatialSignalStrength* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SpatialSignalStrength* New() const final {
    return CreateMaybeMessage<SpatialSignalStrength>(nullptr);
  }

  SpatialSignalStrength* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SpatialSignalStrength>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SpatialSignalStrength& from);
  void MergeFrom(const SpatialSignalStrength& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpatialSignalStrength* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.SpatialSignalStrength";
  }
  protected:
  explicit SpatialSignalStrength(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHorizontalAngleFieldNumber = 1,
    kVerticalAngleFieldNumber = 2,
    kSignalStrengthFieldNumber = 3,
  };
  // double horizontal_angle = 1;
  void clear_horizontal_angle();
  double horizontal_angle() const;
  void set_horizontal_angle(double value);
  private:
  double _internal_horizontal_angle() const;
  void _internal_set_horizontal_angle(double value);
  public:

  // double vertical_angle = 2;
  void clear_vertical_angle();
  double vertical_angle() const;
  void set_vertical_angle(double value);
  private:
  double _internal_vertical_angle() const;
  void _internal_set_vertical_angle(double value);
  public:

  // double signal_strength = 3;
  void clear_signal_strength();
  double signal_strength() const;
  void set_signal_strength(double value);
  private:
  double _internal_signal_strength() const;
  void _internal_set_signal_strength(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.SpatialSignalStrength)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double horizontal_angle_;
  double vertical_angle_;
  double signal_strength_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorDescription PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ColorDescription) */ {
 public:
  inline ColorDescription() : ColorDescription(nullptr) {}
  virtual ~ColorDescription();
  explicit constexpr ColorDescription(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorDescription(const ColorDescription& from);
  ColorDescription(ColorDescription&& from) noexcept
    : ColorDescription() {
    *this = ::std::move(from);
  }

  inline ColorDescription& operator=(const ColorDescription& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorDescription& operator=(ColorDescription&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorDescription& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorDescription* internal_default_instance() {
    return reinterpret_cast<const ColorDescription*>(
               &_ColorDescription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ColorDescription& a, ColorDescription& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorDescription* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorDescription* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorDescription* New() const final {
    return CreateMaybeMessage<ColorDescription>(nullptr);
  }

  ColorDescription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorDescription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorDescription& from);
  void MergeFrom(const ColorDescription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorDescription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ColorDescription";
  }
  protected:
  explicit ColorDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGreyFieldNumber = 1,
    kRgbFieldNumber = 2,
    kRgbirFieldNumber = 3,
    kHsvFieldNumber = 4,
    kLuvFieldNumber = 5,
    kCmykFieldNumber = 6,
  };
  // .osi3.ColorGrey grey = 1;
  bool has_grey() const;
  private:
  bool _internal_has_grey() const;
  public:
  void clear_grey();
  const ::osi3::ColorGrey& grey() const;
  ::osi3::ColorGrey* release_grey();
  ::osi3::ColorGrey* mutable_grey();
  void set_allocated_grey(::osi3::ColorGrey* grey);
  private:
  const ::osi3::ColorGrey& _internal_grey() const;
  ::osi3::ColorGrey* _internal_mutable_grey();
  public:
  void unsafe_arena_set_allocated_grey(
      ::osi3::ColorGrey* grey);
  ::osi3::ColorGrey* unsafe_arena_release_grey();

  // .osi3.ColorRGB rgb = 2;
  bool has_rgb() const;
  private:
  bool _internal_has_rgb() const;
  public:
  void clear_rgb();
  const ::osi3::ColorRGB& rgb() const;
  ::osi3::ColorRGB* release_rgb();
  ::osi3::ColorRGB* mutable_rgb();
  void set_allocated_rgb(::osi3::ColorRGB* rgb);
  private:
  const ::osi3::ColorRGB& _internal_rgb() const;
  ::osi3::ColorRGB* _internal_mutable_rgb();
  public:
  void unsafe_arena_set_allocated_rgb(
      ::osi3::ColorRGB* rgb);
  ::osi3::ColorRGB* unsafe_arena_release_rgb();

  // .osi3.ColorRGBIR rgbir = 3;
  bool has_rgbir() const;
  private:
  bool _internal_has_rgbir() const;
  public:
  void clear_rgbir();
  const ::osi3::ColorRGBIR& rgbir() const;
  ::osi3::ColorRGBIR* release_rgbir();
  ::osi3::ColorRGBIR* mutable_rgbir();
  void set_allocated_rgbir(::osi3::ColorRGBIR* rgbir);
  private:
  const ::osi3::ColorRGBIR& _internal_rgbir() const;
  ::osi3::ColorRGBIR* _internal_mutable_rgbir();
  public:
  void unsafe_arena_set_allocated_rgbir(
      ::osi3::ColorRGBIR* rgbir);
  ::osi3::ColorRGBIR* unsafe_arena_release_rgbir();

  // .osi3.ColorHSV hsv = 4;
  bool has_hsv() const;
  private:
  bool _internal_has_hsv() const;
  public:
  void clear_hsv();
  const ::osi3::ColorHSV& hsv() const;
  ::osi3::ColorHSV* release_hsv();
  ::osi3::ColorHSV* mutable_hsv();
  void set_allocated_hsv(::osi3::ColorHSV* hsv);
  private:
  const ::osi3::ColorHSV& _internal_hsv() const;
  ::osi3::ColorHSV* _internal_mutable_hsv();
  public:
  void unsafe_arena_set_allocated_hsv(
      ::osi3::ColorHSV* hsv);
  ::osi3::ColorHSV* unsafe_arena_release_hsv();

  // .osi3.ColorLUV luv = 5;
  bool has_luv() const;
  private:
  bool _internal_has_luv() const;
  public:
  void clear_luv();
  const ::osi3::ColorLUV& luv() const;
  ::osi3::ColorLUV* release_luv();
  ::osi3::ColorLUV* mutable_luv();
  void set_allocated_luv(::osi3::ColorLUV* luv);
  private:
  const ::osi3::ColorLUV& _internal_luv() const;
  ::osi3::ColorLUV* _internal_mutable_luv();
  public:
  void unsafe_arena_set_allocated_luv(
      ::osi3::ColorLUV* luv);
  ::osi3::ColorLUV* unsafe_arena_release_luv();

  // .osi3.ColorCMYK cmyk = 6;
  bool has_cmyk() const;
  private:
  bool _internal_has_cmyk() const;
  public:
  void clear_cmyk();
  const ::osi3::ColorCMYK& cmyk() const;
  ::osi3::ColorCMYK* release_cmyk();
  ::osi3::ColorCMYK* mutable_cmyk();
  void set_allocated_cmyk(::osi3::ColorCMYK* cmyk);
  private:
  const ::osi3::ColorCMYK& _internal_cmyk() const;
  ::osi3::ColorCMYK* _internal_mutable_cmyk();
  public:
  void unsafe_arena_set_allocated_cmyk(
      ::osi3::ColorCMYK* cmyk);
  ::osi3::ColorCMYK* unsafe_arena_release_cmyk();

  // @@protoc_insertion_point(class_scope:osi3.ColorDescription)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osi3::ColorGrey* grey_;
  ::osi3::ColorRGB* rgb_;
  ::osi3::ColorRGBIR* rgbir_;
  ::osi3::ColorHSV* hsv_;
  ::osi3::ColorLUV* luv_;
  ::osi3::ColorCMYK* cmyk_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorGrey PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ColorGrey) */ {
 public:
  inline ColorGrey() : ColorGrey(nullptr) {}
  virtual ~ColorGrey();
  explicit constexpr ColorGrey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorGrey(const ColorGrey& from);
  ColorGrey(ColorGrey&& from) noexcept
    : ColorGrey() {
    *this = ::std::move(from);
  }

  inline ColorGrey& operator=(const ColorGrey& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorGrey& operator=(ColorGrey&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorGrey& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorGrey* internal_default_instance() {
    return reinterpret_cast<const ColorGrey*>(
               &_ColorGrey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ColorGrey& a, ColorGrey& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorGrey* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorGrey* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorGrey* New() const final {
    return CreateMaybeMessage<ColorGrey>(nullptr);
  }

  ColorGrey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorGrey>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorGrey& from);
  void MergeFrom(const ColorGrey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorGrey* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ColorGrey";
  }
  protected:
  explicit ColorGrey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGreyFieldNumber = 1,
  };
  // double grey = 1;
  void clear_grey();
  double grey() const;
  void set_grey(double value);
  private:
  double _internal_grey() const;
  void _internal_set_grey(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ColorGrey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double grey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorRGB PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ColorRGB) */ {
 public:
  inline ColorRGB() : ColorRGB(nullptr) {}
  virtual ~ColorRGB();
  explicit constexpr ColorRGB(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorRGB(const ColorRGB& from);
  ColorRGB(ColorRGB&& from) noexcept
    : ColorRGB() {
    *this = ::std::move(from);
  }

  inline ColorRGB& operator=(const ColorRGB& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorRGB& operator=(ColorRGB&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorRGB& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorRGB* internal_default_instance() {
    return reinterpret_cast<const ColorRGB*>(
               &_ColorRGB_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ColorRGB& a, ColorRGB& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorRGB* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorRGB* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorRGB* New() const final {
    return CreateMaybeMessage<ColorRGB>(nullptr);
  }

  ColorRGB* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorRGB>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorRGB& from);
  void MergeFrom(const ColorRGB& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorRGB* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ColorRGB";
  }
  protected:
  explicit ColorRGB(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
  };
  // double red = 1;
  void clear_red();
  double red() const;
  void set_red(double value);
  private:
  double _internal_red() const;
  void _internal_set_red(double value);
  public:

  // double green = 2;
  void clear_green();
  double green() const;
  void set_green(double value);
  private:
  double _internal_green() const;
  void _internal_set_green(double value);
  public:

  // double blue = 3;
  void clear_blue();
  double blue() const;
  void set_blue(double value);
  private:
  double _internal_blue() const;
  void _internal_set_blue(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ColorRGB)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double red_;
  double green_;
  double blue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorRGBIR PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ColorRGBIR) */ {
 public:
  inline ColorRGBIR() : ColorRGBIR(nullptr) {}
  virtual ~ColorRGBIR();
  explicit constexpr ColorRGBIR(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorRGBIR(const ColorRGBIR& from);
  ColorRGBIR(ColorRGBIR&& from) noexcept
    : ColorRGBIR() {
    *this = ::std::move(from);
  }

  inline ColorRGBIR& operator=(const ColorRGBIR& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorRGBIR& operator=(ColorRGBIR&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorRGBIR& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorRGBIR* internal_default_instance() {
    return reinterpret_cast<const ColorRGBIR*>(
               &_ColorRGBIR_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ColorRGBIR& a, ColorRGBIR& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorRGBIR* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorRGBIR* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorRGBIR* New() const final {
    return CreateMaybeMessage<ColorRGBIR>(nullptr);
  }

  ColorRGBIR* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorRGBIR>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorRGBIR& from);
  void MergeFrom(const ColorRGBIR& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorRGBIR* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ColorRGBIR";
  }
  protected:
  explicit ColorRGBIR(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRedFieldNumber = 1,
    kGreenFieldNumber = 2,
    kBlueFieldNumber = 3,
    kInfraredFieldNumber = 4,
  };
  // double red = 1;
  void clear_red();
  double red() const;
  void set_red(double value);
  private:
  double _internal_red() const;
  void _internal_set_red(double value);
  public:

  // double green = 2;
  void clear_green();
  double green() const;
  void set_green(double value);
  private:
  double _internal_green() const;
  void _internal_set_green(double value);
  public:

  // double blue = 3;
  void clear_blue();
  double blue() const;
  void set_blue(double value);
  private:
  double _internal_blue() const;
  void _internal_set_blue(double value);
  public:

  // double infrared = 4;
  void clear_infrared();
  double infrared() const;
  void set_infrared(double value);
  private:
  double _internal_infrared() const;
  void _internal_set_infrared(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ColorRGBIR)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double red_;
  double green_;
  double blue_;
  double infrared_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorHSV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ColorHSV) */ {
 public:
  inline ColorHSV() : ColorHSV(nullptr) {}
  virtual ~ColorHSV();
  explicit constexpr ColorHSV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorHSV(const ColorHSV& from);
  ColorHSV(ColorHSV&& from) noexcept
    : ColorHSV() {
    *this = ::std::move(from);
  }

  inline ColorHSV& operator=(const ColorHSV& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorHSV& operator=(ColorHSV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorHSV& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorHSV* internal_default_instance() {
    return reinterpret_cast<const ColorHSV*>(
               &_ColorHSV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ColorHSV& a, ColorHSV& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorHSV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorHSV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorHSV* New() const final {
    return CreateMaybeMessage<ColorHSV>(nullptr);
  }

  ColorHSV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorHSV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorHSV& from);
  void MergeFrom(const ColorHSV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorHSV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ColorHSV";
  }
  protected:
  explicit ColorHSV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHueFieldNumber = 1,
    kSaturationFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // double hue = 1;
  void clear_hue();
  double hue() const;
  void set_hue(double value);
  private:
  double _internal_hue() const;
  void _internal_set_hue(double value);
  public:

  // double saturation = 2;
  void clear_saturation();
  double saturation() const;
  void set_saturation(double value);
  private:
  double _internal_saturation() const;
  void _internal_set_saturation(double value);
  public:

  // double value = 3;
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ColorHSV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double hue_;
  double saturation_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorLUV PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ColorLUV) */ {
 public:
  inline ColorLUV() : ColorLUV(nullptr) {}
  virtual ~ColorLUV();
  explicit constexpr ColorLUV(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorLUV(const ColorLUV& from);
  ColorLUV(ColorLUV&& from) noexcept
    : ColorLUV() {
    *this = ::std::move(from);
  }

  inline ColorLUV& operator=(const ColorLUV& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorLUV& operator=(ColorLUV&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorLUV& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorLUV* internal_default_instance() {
    return reinterpret_cast<const ColorLUV*>(
               &_ColorLUV_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ColorLUV& a, ColorLUV& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorLUV* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorLUV* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorLUV* New() const final {
    return CreateMaybeMessage<ColorLUV>(nullptr);
  }

  ColorLUV* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorLUV>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorLUV& from);
  void MergeFrom(const ColorLUV& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorLUV* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ColorLUV";
  }
  protected:
  explicit ColorLUV(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLuminanceFieldNumber = 1,
    kUFieldNumber = 2,
    kVFieldNumber = 3,
  };
  // double luminance = 1;
  void clear_luminance();
  double luminance() const;
  void set_luminance(double value);
  private:
  double _internal_luminance() const;
  void _internal_set_luminance(double value);
  public:

  // double u = 2;
  void clear_u();
  double u() const;
  void set_u(double value);
  private:
  double _internal_u() const;
  void _internal_set_u(double value);
  public:

  // double v = 3;
  void clear_v();
  double v() const;
  void set_v(double value);
  private:
  double _internal_v() const;
  void _internal_set_v(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ColorLUV)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double luminance_;
  double u_;
  double v_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class ColorCMYK PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.ColorCMYK) */ {
 public:
  inline ColorCMYK() : ColorCMYK(nullptr) {}
  virtual ~ColorCMYK();
  explicit constexpr ColorCMYK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ColorCMYK(const ColorCMYK& from);
  ColorCMYK(ColorCMYK&& from) noexcept
    : ColorCMYK() {
    *this = ::std::move(from);
  }

  inline ColorCMYK& operator=(const ColorCMYK& from) {
    CopyFrom(from);
    return *this;
  }
  inline ColorCMYK& operator=(ColorCMYK&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ColorCMYK& default_instance() {
    return *internal_default_instance();
  }
  static inline const ColorCMYK* internal_default_instance() {
    return reinterpret_cast<const ColorCMYK*>(
               &_ColorCMYK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ColorCMYK& a, ColorCMYK& b) {
    a.Swap(&b);
  }
  inline void Swap(ColorCMYK* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ColorCMYK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ColorCMYK* New() const final {
    return CreateMaybeMessage<ColorCMYK>(nullptr);
  }

  ColorCMYK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ColorCMYK>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ColorCMYK& from);
  void MergeFrom(const ColorCMYK& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ColorCMYK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.ColorCMYK";
  }
  protected:
  explicit ColorCMYK(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCyanFieldNumber = 1,
    kMagentaFieldNumber = 2,
    kYellowFieldNumber = 3,
    kKeyFieldNumber = 4,
  };
  // double cyan = 1;
  void clear_cyan();
  double cyan() const;
  void set_cyan(double value);
  private:
  double _internal_cyan() const;
  void _internal_set_cyan(double value);
  public:

  // double magenta = 2;
  void clear_magenta();
  double magenta() const;
  void set_magenta(double value);
  private:
  double _internal_magenta() const;
  void _internal_set_magenta(double value);
  public:

  // double yellow = 3;
  void clear_yellow();
  double yellow() const;
  void set_yellow(double value);
  private:
  double _internal_yellow() const;
  void _internal_set_yellow(double value);
  public:

  // double key = 4;
  void clear_key();
  double key() const;
  void set_key(double value);
  private:
  double _internal_key() const;
  void _internal_set_key(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.ColorCMYK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double cyan_;
  double magenta_;
  double yellow_;
  double key_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class Pedalry PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.Pedalry) */ {
 public:
  inline Pedalry() : Pedalry(nullptr) {}
  virtual ~Pedalry();
  explicit constexpr Pedalry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pedalry(const Pedalry& from);
  Pedalry(Pedalry&& from) noexcept
    : Pedalry() {
    *this = ::std::move(from);
  }

  inline Pedalry& operator=(const Pedalry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pedalry& operator=(Pedalry&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pedalry& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pedalry* internal_default_instance() {
    return reinterpret_cast<const Pedalry*>(
               &_Pedalry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Pedalry& a, Pedalry& b) {
    a.Swap(&b);
  }
  inline void Swap(Pedalry* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pedalry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pedalry* New() const final {
    return CreateMaybeMessage<Pedalry>(nullptr);
  }

  Pedalry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pedalry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pedalry& from);
  void MergeFrom(const Pedalry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pedalry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.Pedalry";
  }
  protected:
  explicit Pedalry(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPedalPositionAccelerationFieldNumber = 1,
    kPedalPositionBrakeFieldNumber = 2,
    kPedalPositionClutchFieldNumber = 3,
  };
  // double pedal_position_acceleration = 1;
  void clear_pedal_position_acceleration();
  double pedal_position_acceleration() const;
  void set_pedal_position_acceleration(double value);
  private:
  double _internal_pedal_position_acceleration() const;
  void _internal_set_pedal_position_acceleration(double value);
  public:

  // double pedal_position_brake = 2;
  void clear_pedal_position_brake();
  double pedal_position_brake() const;
  void set_pedal_position_brake(double value);
  private:
  double _internal_pedal_position_brake() const;
  void _internal_set_pedal_position_brake(double value);
  public:

  // double pedal_position_clutch = 3;
  void clear_pedal_position_clutch();
  double pedal_position_clutch() const;
  void set_pedal_position_clutch(double value);
  private:
  double _internal_pedal_position_clutch() const;
  void _internal_set_pedal_position_clutch(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.Pedalry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double pedal_position_acceleration_;
  double pedal_position_brake_;
  double pedal_position_clutch_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class VehicleSteeringWheel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.VehicleSteeringWheel) */ {
 public:
  inline VehicleSteeringWheel() : VehicleSteeringWheel(nullptr) {}
  virtual ~VehicleSteeringWheel();
  explicit constexpr VehicleSteeringWheel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VehicleSteeringWheel(const VehicleSteeringWheel& from);
  VehicleSteeringWheel(VehicleSteeringWheel&& from) noexcept
    : VehicleSteeringWheel() {
    *this = ::std::move(from);
  }

  inline VehicleSteeringWheel& operator=(const VehicleSteeringWheel& from) {
    CopyFrom(from);
    return *this;
  }
  inline VehicleSteeringWheel& operator=(VehicleSteeringWheel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VehicleSteeringWheel& default_instance() {
    return *internal_default_instance();
  }
  static inline const VehicleSteeringWheel* internal_default_instance() {
    return reinterpret_cast<const VehicleSteeringWheel*>(
               &_VehicleSteeringWheel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(VehicleSteeringWheel& a, VehicleSteeringWheel& b) {
    a.Swap(&b);
  }
  inline void Swap(VehicleSteeringWheel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VehicleSteeringWheel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VehicleSteeringWheel* New() const final {
    return CreateMaybeMessage<VehicleSteeringWheel>(nullptr);
  }

  VehicleSteeringWheel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VehicleSteeringWheel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VehicleSteeringWheel& from);
  void MergeFrom(const VehicleSteeringWheel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehicleSteeringWheel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.VehicleSteeringWheel";
  }
  protected:
  explicit VehicleSteeringWheel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAngleFieldNumber = 1,
    kAngularSpeedFieldNumber = 2,
    kTorqueFieldNumber = 3,
  };
  // double angle = 1;
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // double angular_speed = 2;
  void clear_angular_speed();
  double angular_speed() const;
  void set_angular_speed(double value);
  private:
  double _internal_angular_speed() const;
  void _internal_set_angular_speed(double value);
  public:

  // double torque = 3;
  void clear_torque();
  double torque() const;
  void set_torque(double value);
  private:
  double _internal_torque() const;
  void _internal_set_torque(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.VehicleSteeringWheel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double angle_;
  double angular_speed_;
  double torque_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class GeodeticPosition PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.GeodeticPosition) */ {
 public:
  inline GeodeticPosition() : GeodeticPosition(nullptr) {}
  virtual ~GeodeticPosition();
  explicit constexpr GeodeticPosition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeodeticPosition(const GeodeticPosition& from);
  GeodeticPosition(GeodeticPosition&& from) noexcept
    : GeodeticPosition() {
    *this = ::std::move(from);
  }

  inline GeodeticPosition& operator=(const GeodeticPosition& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeodeticPosition& operator=(GeodeticPosition&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GeodeticPosition& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeodeticPosition* internal_default_instance() {
    return reinterpret_cast<const GeodeticPosition*>(
               &_GeodeticPosition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GeodeticPosition& a, GeodeticPosition& b) {
    a.Swap(&b);
  }
  inline void Swap(GeodeticPosition* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeodeticPosition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GeodeticPosition* New() const final {
    return CreateMaybeMessage<GeodeticPosition>(nullptr);
  }

  GeodeticPosition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GeodeticPosition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GeodeticPosition& from);
  void MergeFrom(const GeodeticPosition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeodeticPosition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.GeodeticPosition";
  }
  protected:
  explicit GeodeticPosition(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kAltitudeFieldNumber = 3,
  };
  // double longitude = 1;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double altitude = 3;
  void clear_altitude();
  double altitude() const;
  void set_altitude(double value);
  private:
  double _internal_altitude() const;
  void _internal_set_altitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:osi3.GeodeticPosition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double longitude_;
  double latitude_;
  double altitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// -------------------------------------------------------------------

class KeyValuePair PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.KeyValuePair) */ {
 public:
  inline KeyValuePair() : KeyValuePair(nullptr) {}
  virtual ~KeyValuePair();
  explicit constexpr KeyValuePair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KeyValuePair(const KeyValuePair& from);
  KeyValuePair(KeyValuePair&& from) noexcept
    : KeyValuePair() {
    *this = ::std::move(from);
  }

  inline KeyValuePair& operator=(const KeyValuePair& from) {
    CopyFrom(from);
    return *this;
  }
  inline KeyValuePair& operator=(KeyValuePair&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KeyValuePair& default_instance() {
    return *internal_default_instance();
  }
  static inline const KeyValuePair* internal_default_instance() {
    return reinterpret_cast<const KeyValuePair*>(
               &_KeyValuePair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(KeyValuePair& a, KeyValuePair& b) {
    a.Swap(&b);
  }
  inline void Swap(KeyValuePair* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KeyValuePair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KeyValuePair* New() const final {
    return CreateMaybeMessage<KeyValuePair>(nullptr);
  }

  KeyValuePair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KeyValuePair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KeyValuePair& from);
  void MergeFrom(const KeyValuePair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KeyValuePair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.KeyValuePair";
  }
  protected:
  explicit KeyValuePair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fcommon_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:osi3.KeyValuePair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fcommon_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector3d

// double x = 1;
inline void Vector3d::clear_x() {
  x_ = 0;
}
inline double Vector3d::_internal_x() const {
  return x_;
}
inline double Vector3d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.x)
  return _internal_x();
}
inline void Vector3d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:osi3.Vector3d.x)
}

// double y = 2;
inline void Vector3d::clear_y() {
  y_ = 0;
}
inline double Vector3d::_internal_y() const {
  return y_;
}
inline double Vector3d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.y)
  return _internal_y();
}
inline void Vector3d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:osi3.Vector3d.y)
}

// double z = 3;
inline void Vector3d::clear_z() {
  z_ = 0;
}
inline double Vector3d::_internal_z() const {
  return z_;
}
inline double Vector3d::z() const {
  // @@protoc_insertion_point(field_get:osi3.Vector3d.z)
  return _internal_z();
}
inline void Vector3d::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3d::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:osi3.Vector3d.z)
}

// -------------------------------------------------------------------

// Vector2d

// double x = 1;
inline void Vector2d::clear_x() {
  x_ = 0;
}
inline double Vector2d::_internal_x() const {
  return x_;
}
inline double Vector2d::x() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.x)
  return _internal_x();
}
inline void Vector2d::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector2d::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:osi3.Vector2d.x)
}

// double y = 2;
inline void Vector2d::clear_y() {
  y_ = 0;
}
inline double Vector2d::_internal_y() const {
  return y_;
}
inline double Vector2d::y() const {
  // @@protoc_insertion_point(field_get:osi3.Vector2d.y)
  return _internal_y();
}
inline void Vector2d::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector2d::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:osi3.Vector2d.y)
}

// -------------------------------------------------------------------

// Timestamp

// int64 seconds = 1;
inline void Timestamp::clear_seconds() {
  seconds_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::_internal_seconds() const {
  return seconds_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Timestamp::seconds() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.seconds)
  return _internal_seconds();
}
inline void Timestamp::_internal_set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  seconds_ = value;
}
inline void Timestamp::set_seconds(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_seconds(value);
  // @@protoc_insertion_point(field_set:osi3.Timestamp.seconds)
}

// uint32 nanos = 2;
inline void Timestamp::clear_nanos() {
  nanos_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::_internal_nanos() const {
  return nanos_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Timestamp::nanos() const {
  // @@protoc_insertion_point(field_get:osi3.Timestamp.nanos)
  return _internal_nanos();
}
inline void Timestamp::_internal_set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  nanos_ = value;
}
inline void Timestamp::set_nanos(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nanos(value);
  // @@protoc_insertion_point(field_set:osi3.Timestamp.nanos)
}

// -------------------------------------------------------------------

// Dimension3d

// double length = 1;
inline void Dimension3d::clear_length() {
  length_ = 0;
}
inline double Dimension3d::_internal_length() const {
  return length_;
}
inline double Dimension3d::length() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.length)
  return _internal_length();
}
inline void Dimension3d::_internal_set_length(double value) {
  
  length_ = value;
}
inline void Dimension3d::set_length(double value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.length)
}

// double width = 2;
inline void Dimension3d::clear_width() {
  width_ = 0;
}
inline double Dimension3d::_internal_width() const {
  return width_;
}
inline double Dimension3d::width() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.width)
  return _internal_width();
}
inline void Dimension3d::_internal_set_width(double value) {
  
  width_ = value;
}
inline void Dimension3d::set_width(double value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.width)
}

// double height = 3;
inline void Dimension3d::clear_height() {
  height_ = 0;
}
inline double Dimension3d::_internal_height() const {
  return height_;
}
inline double Dimension3d::height() const {
  // @@protoc_insertion_point(field_get:osi3.Dimension3d.height)
  return _internal_height();
}
inline void Dimension3d::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Dimension3d::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:osi3.Dimension3d.height)
}

// -------------------------------------------------------------------

// Orientation3d

// double roll = 1;
inline void Orientation3d::clear_roll() {
  roll_ = 0;
}
inline double Orientation3d::_internal_roll() const {
  return roll_;
}
inline double Orientation3d::roll() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.roll)
  return _internal_roll();
}
inline void Orientation3d::_internal_set_roll(double value) {
  
  roll_ = value;
}
inline void Orientation3d::set_roll(double value) {
  _internal_set_roll(value);
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.roll)
}

// double pitch = 2;
inline void Orientation3d::clear_pitch() {
  pitch_ = 0;
}
inline double Orientation3d::_internal_pitch() const {
  return pitch_;
}
inline double Orientation3d::pitch() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.pitch)
  return _internal_pitch();
}
inline void Orientation3d::_internal_set_pitch(double value) {
  
  pitch_ = value;
}
inline void Orientation3d::set_pitch(double value) {
  _internal_set_pitch(value);
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.pitch)
}

// double yaw = 3;
inline void Orientation3d::clear_yaw() {
  yaw_ = 0;
}
inline double Orientation3d::_internal_yaw() const {
  return yaw_;
}
inline double Orientation3d::yaw() const {
  // @@protoc_insertion_point(field_get:osi3.Orientation3d.yaw)
  return _internal_yaw();
}
inline void Orientation3d::_internal_set_yaw(double value) {
  
  yaw_ = value;
}
inline void Orientation3d::set_yaw(double value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:osi3.Orientation3d.yaw)
}

// -------------------------------------------------------------------

// Identifier

// uint64 value = 1;
inline void Identifier::clear_value() {
  value_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Identifier::_internal_value() const {
  return value_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Identifier::value() const {
  // @@protoc_insertion_point(field_get:osi3.Identifier.value)
  return _internal_value();
}
inline void Identifier::_internal_set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  value_ = value;
}
inline void Identifier::set_value(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:osi3.Identifier.value)
}

// -------------------------------------------------------------------

// ExternalReference

// string reference = 1;
inline void ExternalReference::clear_reference() {
  reference_.ClearToEmpty();
}
inline const std::string& ExternalReference::reference() const {
  // @@protoc_insertion_point(field_get:osi3.ExternalReference.reference)
  return _internal_reference();
}
inline void ExternalReference::set_reference(const std::string& value) {
  _internal_set_reference(value);
  // @@protoc_insertion_point(field_set:osi3.ExternalReference.reference)
}
inline std::string* ExternalReference::mutable_reference() {
  // @@protoc_insertion_point(field_mutable:osi3.ExternalReference.reference)
  return _internal_mutable_reference();
}
inline const std::string& ExternalReference::_internal_reference() const {
  return reference_.Get();
}
inline void ExternalReference::_internal_set_reference(const std::string& value) {
  
  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExternalReference::set_reference(std::string&& value) {
  
  reference_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osi3.ExternalReference.reference)
}
inline void ExternalReference::set_reference(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osi3.ExternalReference.reference)
}
inline void ExternalReference::set_reference(const char* value,
    size_t size) {
  
  reference_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osi3.ExternalReference.reference)
}
inline std::string* ExternalReference::_internal_mutable_reference() {
  
  return reference_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExternalReference::release_reference() {
  // @@protoc_insertion_point(field_release:osi3.ExternalReference.reference)
  return reference_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExternalReference::set_allocated_reference(std::string* reference) {
  if (reference != nullptr) {
    
  } else {
    
  }
  reference_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reference,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osi3.ExternalReference.reference)
}

// string type = 2;
inline void ExternalReference::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ExternalReference::type() const {
  // @@protoc_insertion_point(field_get:osi3.ExternalReference.type)
  return _internal_type();
}
inline void ExternalReference::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:osi3.ExternalReference.type)
}
inline std::string* ExternalReference::mutable_type() {
  // @@protoc_insertion_point(field_mutable:osi3.ExternalReference.type)
  return _internal_mutable_type();
}
inline const std::string& ExternalReference::_internal_type() const {
  return type_.Get();
}
inline void ExternalReference::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ExternalReference::set_type(std::string&& value) {
  
  type_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osi3.ExternalReference.type)
}
inline void ExternalReference::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osi3.ExternalReference.type)
}
inline void ExternalReference::set_type(const char* value,
    size_t size) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osi3.ExternalReference.type)
}
inline std::string* ExternalReference::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ExternalReference::release_type() {
  // @@protoc_insertion_point(field_release:osi3.ExternalReference.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ExternalReference::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osi3.ExternalReference.type)
}

// repeated string identifier = 3;
inline int ExternalReference::_internal_identifier_size() const {
  return identifier_.size();
}
inline int ExternalReference::identifier_size() const {
  return _internal_identifier_size();
}
inline void ExternalReference::clear_identifier() {
  identifier_.Clear();
}
inline std::string* ExternalReference::add_identifier() {
  // @@protoc_insertion_point(field_add_mutable:osi3.ExternalReference.identifier)
  return _internal_add_identifier();
}
inline const std::string& ExternalReference::_internal_identifier(int index) const {
  return identifier_.Get(index);
}
inline const std::string& ExternalReference::identifier(int index) const {
  // @@protoc_insertion_point(field_get:osi3.ExternalReference.identifier)
  return _internal_identifier(index);
}
inline std::string* ExternalReference::mutable_identifier(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.ExternalReference.identifier)
  return identifier_.Mutable(index);
}
inline void ExternalReference::set_identifier(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:osi3.ExternalReference.identifier)
  identifier_.Mutable(index)->assign(value);
}
inline void ExternalReference::set_identifier(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:osi3.ExternalReference.identifier)
  identifier_.Mutable(index)->assign(std::move(value));
}
inline void ExternalReference::set_identifier(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identifier_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:osi3.ExternalReference.identifier)
}
inline void ExternalReference::set_identifier(int index, const char* value, size_t size) {
  identifier_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:osi3.ExternalReference.identifier)
}
inline std::string* ExternalReference::_internal_add_identifier() {
  return identifier_.Add();
}
inline void ExternalReference::add_identifier(const std::string& value) {
  identifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:osi3.ExternalReference.identifier)
}
inline void ExternalReference::add_identifier(std::string&& value) {
  identifier_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:osi3.ExternalReference.identifier)
}
inline void ExternalReference::add_identifier(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  identifier_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:osi3.ExternalReference.identifier)
}
inline void ExternalReference::add_identifier(const char* value, size_t size) {
  identifier_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:osi3.ExternalReference.identifier)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ExternalReference::identifier() const {
  // @@protoc_insertion_point(field_list:osi3.ExternalReference.identifier)
  return identifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ExternalReference::mutable_identifier() {
  // @@protoc_insertion_point(field_mutable_list:osi3.ExternalReference.identifier)
  return &identifier_;
}

// -------------------------------------------------------------------

// MountingPosition

// .osi3.Vector3d position = 1;
inline bool MountingPosition::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool MountingPosition::has_position() const {
  return _internal_has_position();
}
inline void MountingPosition::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::osi3::Vector3d& MountingPosition::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& MountingPosition::position() const {
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.position)
  return _internal_position();
}
inline void MountingPosition::unsafe_arena_set_allocated_position(
    ::osi3::Vector3d* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MountingPosition.position)
}
inline ::osi3::Vector3d* MountingPosition::release_position() {
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Vector3d* MountingPosition::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* MountingPosition::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* MountingPosition::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.position)
  return _internal_mutable_position();
}
inline void MountingPosition::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.position)
}

// .osi3.Orientation3d orientation = 2;
inline bool MountingPosition::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool MountingPosition::has_orientation() const {
  return _internal_has_orientation();
}
inline void MountingPosition::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::osi3::Orientation3d& MountingPosition::_internal_orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& MountingPosition::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.MountingPosition.orientation)
  return _internal_orientation();
}
inline void MountingPosition::unsafe_arena_set_allocated_orientation(
    ::osi3::Orientation3d* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.MountingPosition.orientation)
}
inline ::osi3::Orientation3d* MountingPosition::release_orientation() {
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Orientation3d* MountingPosition::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.MountingPosition.orientation)
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* MountingPosition::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::osi3::Orientation3d* MountingPosition::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:osi3.MountingPosition.orientation)
  return _internal_mutable_orientation();
}
inline void MountingPosition::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.MountingPosition.orientation)
}

// -------------------------------------------------------------------

// Spherical3d

// double distance = 1;
inline void Spherical3d::clear_distance() {
  distance_ = 0;
}
inline double Spherical3d::_internal_distance() const {
  return distance_;
}
inline double Spherical3d::distance() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.distance)
  return _internal_distance();
}
inline void Spherical3d::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void Spherical3d::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.distance)
}

// double azimuth = 2;
inline void Spherical3d::clear_azimuth() {
  azimuth_ = 0;
}
inline double Spherical3d::_internal_azimuth() const {
  return azimuth_;
}
inline double Spherical3d::azimuth() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.azimuth)
  return _internal_azimuth();
}
inline void Spherical3d::_internal_set_azimuth(double value) {
  
  azimuth_ = value;
}
inline void Spherical3d::set_azimuth(double value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.azimuth)
}

// double elevation = 3;
inline void Spherical3d::clear_elevation() {
  elevation_ = 0;
}
inline double Spherical3d::_internal_elevation() const {
  return elevation_;
}
inline double Spherical3d::elevation() const {
  // @@protoc_insertion_point(field_get:osi3.Spherical3d.elevation)
  return _internal_elevation();
}
inline void Spherical3d::_internal_set_elevation(double value) {
  
  elevation_ = value;
}
inline void Spherical3d::set_elevation(double value) {
  _internal_set_elevation(value);
  // @@protoc_insertion_point(field_set:osi3.Spherical3d.elevation)
}

// -------------------------------------------------------------------

// LogicalLaneAssignment

// .osi3.Identifier assigned_lane_id = 1;
inline bool LogicalLaneAssignment::_internal_has_assigned_lane_id() const {
  return this != internal_default_instance() && assigned_lane_id_ != nullptr;
}
inline bool LogicalLaneAssignment::has_assigned_lane_id() const {
  return _internal_has_assigned_lane_id();
}
inline void LogicalLaneAssignment::clear_assigned_lane_id() {
  if (GetArena() == nullptr && assigned_lane_id_ != nullptr) {
    delete assigned_lane_id_;
  }
  assigned_lane_id_ = nullptr;
}
inline const ::osi3::Identifier& LogicalLaneAssignment::_internal_assigned_lane_id() const {
  const ::osi3::Identifier* p = assigned_lane_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Identifier&>(
      ::osi3::_Identifier_default_instance_);
}
inline const ::osi3::Identifier& LogicalLaneAssignment::assigned_lane_id() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneAssignment.assigned_lane_id)
  return _internal_assigned_lane_id();
}
inline void LogicalLaneAssignment::unsafe_arena_set_allocated_assigned_lane_id(
    ::osi3::Identifier* assigned_lane_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(assigned_lane_id_);
  }
  assigned_lane_id_ = assigned_lane_id;
  if (assigned_lane_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.LogicalLaneAssignment.assigned_lane_id)
}
inline ::osi3::Identifier* LogicalLaneAssignment::release_assigned_lane_id() {
  
  ::osi3::Identifier* temp = assigned_lane_id_;
  assigned_lane_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Identifier* LogicalLaneAssignment::unsafe_arena_release_assigned_lane_id() {
  // @@protoc_insertion_point(field_release:osi3.LogicalLaneAssignment.assigned_lane_id)
  
  ::osi3::Identifier* temp = assigned_lane_id_;
  assigned_lane_id_ = nullptr;
  return temp;
}
inline ::osi3::Identifier* LogicalLaneAssignment::_internal_mutable_assigned_lane_id() {
  
  if (assigned_lane_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Identifier>(GetArena());
    assigned_lane_id_ = p;
  }
  return assigned_lane_id_;
}
inline ::osi3::Identifier* LogicalLaneAssignment::mutable_assigned_lane_id() {
  // @@protoc_insertion_point(field_mutable:osi3.LogicalLaneAssignment.assigned_lane_id)
  return _internal_mutable_assigned_lane_id();
}
inline void LogicalLaneAssignment::set_allocated_assigned_lane_id(::osi3::Identifier* assigned_lane_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete assigned_lane_id_;
  }
  if (assigned_lane_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(assigned_lane_id);
    if (message_arena != submessage_arena) {
      assigned_lane_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assigned_lane_id, submessage_arena);
    }
    
  } else {
    
  }
  assigned_lane_id_ = assigned_lane_id;
  // @@protoc_insertion_point(field_set_allocated:osi3.LogicalLaneAssignment.assigned_lane_id)
}

// double s_position = 2;
inline void LogicalLaneAssignment::clear_s_position() {
  s_position_ = 0;
}
inline double LogicalLaneAssignment::_internal_s_position() const {
  return s_position_;
}
inline double LogicalLaneAssignment::s_position() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneAssignment.s_position)
  return _internal_s_position();
}
inline void LogicalLaneAssignment::_internal_set_s_position(double value) {
  
  s_position_ = value;
}
inline void LogicalLaneAssignment::set_s_position(double value) {
  _internal_set_s_position(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalLaneAssignment.s_position)
}

// double t_position = 3;
inline void LogicalLaneAssignment::clear_t_position() {
  t_position_ = 0;
}
inline double LogicalLaneAssignment::_internal_t_position() const {
  return t_position_;
}
inline double LogicalLaneAssignment::t_position() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneAssignment.t_position)
  return _internal_t_position();
}
inline void LogicalLaneAssignment::_internal_set_t_position(double value) {
  
  t_position_ = value;
}
inline void LogicalLaneAssignment::set_t_position(double value) {
  _internal_set_t_position(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalLaneAssignment.t_position)
}

// double angle_to_lane = 4;
inline void LogicalLaneAssignment::clear_angle_to_lane() {
  angle_to_lane_ = 0;
}
inline double LogicalLaneAssignment::_internal_angle_to_lane() const {
  return angle_to_lane_;
}
inline double LogicalLaneAssignment::angle_to_lane() const {
  // @@protoc_insertion_point(field_get:osi3.LogicalLaneAssignment.angle_to_lane)
  return _internal_angle_to_lane();
}
inline void LogicalLaneAssignment::_internal_set_angle_to_lane(double value) {
  
  angle_to_lane_ = value;
}
inline void LogicalLaneAssignment::set_angle_to_lane(double value) {
  _internal_set_angle_to_lane(value);
  // @@protoc_insertion_point(field_set:osi3.LogicalLaneAssignment.angle_to_lane)
}

// -------------------------------------------------------------------

// BaseStationary

// .osi3.Dimension3d dimension = 1;
inline bool BaseStationary::_internal_has_dimension() const {
  return this != internal_default_instance() && dimension_ != nullptr;
}
inline bool BaseStationary::has_dimension() const {
  return _internal_has_dimension();
}
inline void BaseStationary::clear_dimension() {
  if (GetArena() == nullptr && dimension_ != nullptr) {
    delete dimension_;
  }
  dimension_ = nullptr;
}
inline const ::osi3::Dimension3d& BaseStationary::_internal_dimension() const {
  const ::osi3::Dimension3d* p = dimension_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Dimension3d&>(
      ::osi3::_Dimension3d_default_instance_);
}
inline const ::osi3::Dimension3d& BaseStationary::dimension() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.dimension)
  return _internal_dimension();
}
inline void BaseStationary::unsafe_arena_set_allocated_dimension(
    ::osi3::Dimension3d* dimension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dimension_);
  }
  dimension_ = dimension;
  if (dimension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseStationary.dimension)
}
inline ::osi3::Dimension3d* BaseStationary::release_dimension() {
  
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Dimension3d* BaseStationary::unsafe_arena_release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.dimension)
  
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = nullptr;
  return temp;
}
inline ::osi3::Dimension3d* BaseStationary::_internal_mutable_dimension() {
  
  if (dimension_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Dimension3d>(GetArena());
    dimension_ = p;
  }
  return dimension_;
}
inline ::osi3::Dimension3d* BaseStationary::mutable_dimension() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.dimension)
  return _internal_mutable_dimension();
}
inline void BaseStationary::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dimension_;
  }
  if (dimension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dimension);
    if (message_arena != submessage_arena) {
      dimension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimension, submessage_arena);
    }
    
  } else {
    
  }
  dimension_ = dimension;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.dimension)
}

// .osi3.Vector3d position = 2;
inline bool BaseStationary::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BaseStationary::has_position() const {
  return _internal_has_position();
}
inline void BaseStationary::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::osi3::Vector3d& BaseStationary::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& BaseStationary::position() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.position)
  return _internal_position();
}
inline void BaseStationary::unsafe_arena_set_allocated_position(
    ::osi3::Vector3d* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseStationary.position)
}
inline ::osi3::Vector3d* BaseStationary::release_position() {
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Vector3d* BaseStationary::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* BaseStationary::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* BaseStationary::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.position)
  return _internal_mutable_position();
}
inline void BaseStationary::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.position)
}

// .osi3.Orientation3d orientation = 3;
inline bool BaseStationary::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool BaseStationary::has_orientation() const {
  return _internal_has_orientation();
}
inline void BaseStationary::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::osi3::Orientation3d& BaseStationary::_internal_orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& BaseStationary::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.orientation)
  return _internal_orientation();
}
inline void BaseStationary::unsafe_arena_set_allocated_orientation(
    ::osi3::Orientation3d* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseStationary.orientation)
}
inline ::osi3::Orientation3d* BaseStationary::release_orientation() {
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Orientation3d* BaseStationary::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseStationary.orientation)
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* BaseStationary::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::osi3::Orientation3d* BaseStationary::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.orientation)
  return _internal_mutable_orientation();
}
inline void BaseStationary::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseStationary.orientation)
}

// repeated .osi3.Vector2d base_polygon = 4;
inline int BaseStationary::_internal_base_polygon_size() const {
  return base_polygon_.size();
}
inline int BaseStationary::base_polygon_size() const {
  return _internal_base_polygon_size();
}
inline void BaseStationary::clear_base_polygon() {
  base_polygon_.Clear();
}
inline ::osi3::Vector2d* BaseStationary::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseStationary.base_polygon)
  return base_polygon_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >*
BaseStationary::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseStationary.base_polygon)
  return &base_polygon_;
}
inline const ::osi3::Vector2d& BaseStationary::_internal_base_polygon(int index) const {
  return base_polygon_.Get(index);
}
inline const ::osi3::Vector2d& BaseStationary::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseStationary.base_polygon)
  return _internal_base_polygon(index);
}
inline ::osi3::Vector2d* BaseStationary::_internal_add_base_polygon() {
  return base_polygon_.Add();
}
inline ::osi3::Vector2d* BaseStationary::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseStationary.base_polygon)
  return _internal_add_base_polygon();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >&
BaseStationary::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseStationary.base_polygon)
  return base_polygon_;
}

// -------------------------------------------------------------------

// BaseMoving

// .osi3.Dimension3d dimension = 1;
inline bool BaseMoving::_internal_has_dimension() const {
  return this != internal_default_instance() && dimension_ != nullptr;
}
inline bool BaseMoving::has_dimension() const {
  return _internal_has_dimension();
}
inline void BaseMoving::clear_dimension() {
  if (GetArena() == nullptr && dimension_ != nullptr) {
    delete dimension_;
  }
  dimension_ = nullptr;
}
inline const ::osi3::Dimension3d& BaseMoving::_internal_dimension() const {
  const ::osi3::Dimension3d* p = dimension_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Dimension3d&>(
      ::osi3::_Dimension3d_default_instance_);
}
inline const ::osi3::Dimension3d& BaseMoving::dimension() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.dimension)
  return _internal_dimension();
}
inline void BaseMoving::unsafe_arena_set_allocated_dimension(
    ::osi3::Dimension3d* dimension) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dimension_);
  }
  dimension_ = dimension;
  if (dimension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseMoving.dimension)
}
inline ::osi3::Dimension3d* BaseMoving::release_dimension() {
  
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Dimension3d* BaseMoving::unsafe_arena_release_dimension() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.dimension)
  
  ::osi3::Dimension3d* temp = dimension_;
  dimension_ = nullptr;
  return temp;
}
inline ::osi3::Dimension3d* BaseMoving::_internal_mutable_dimension() {
  
  if (dimension_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Dimension3d>(GetArena());
    dimension_ = p;
  }
  return dimension_;
}
inline ::osi3::Dimension3d* BaseMoving::mutable_dimension() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.dimension)
  return _internal_mutable_dimension();
}
inline void BaseMoving::set_allocated_dimension(::osi3::Dimension3d* dimension) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete dimension_;
  }
  if (dimension) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(dimension);
    if (message_arena != submessage_arena) {
      dimension = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dimension, submessage_arena);
    }
    
  } else {
    
  }
  dimension_ = dimension;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.dimension)
}

// .osi3.Vector3d position = 2;
inline bool BaseMoving::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool BaseMoving::has_position() const {
  return _internal_has_position();
}
inline void BaseMoving::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::osi3::Vector3d& BaseMoving::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& BaseMoving::position() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.position)
  return _internal_position();
}
inline void BaseMoving::unsafe_arena_set_allocated_position(
    ::osi3::Vector3d* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseMoving.position)
}
inline ::osi3::Vector3d* BaseMoving::release_position() {
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* BaseMoving::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.position)
  return _internal_mutable_position();
}
inline void BaseMoving::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.position)
}

// .osi3.Orientation3d orientation = 3;
inline bool BaseMoving::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool BaseMoving::has_orientation() const {
  return _internal_has_orientation();
}
inline void BaseMoving::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::osi3::Orientation3d& BaseMoving::_internal_orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& BaseMoving::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation)
  return _internal_orientation();
}
inline void BaseMoving::unsafe_arena_set_allocated_orientation(
    ::osi3::Orientation3d* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseMoving.orientation)
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation() {
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation)
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation)
  return _internal_mutable_orientation();
}
inline void BaseMoving::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation)
}

// .osi3.Vector3d velocity = 4;
inline bool BaseMoving::_internal_has_velocity() const {
  return this != internal_default_instance() && velocity_ != nullptr;
}
inline bool BaseMoving::has_velocity() const {
  return _internal_has_velocity();
}
inline void BaseMoving::clear_velocity() {
  if (GetArena() == nullptr && velocity_ != nullptr) {
    delete velocity_;
  }
  velocity_ = nullptr;
}
inline const ::osi3::Vector3d& BaseMoving::_internal_velocity() const {
  const ::osi3::Vector3d* p = velocity_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& BaseMoving::velocity() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.velocity)
  return _internal_velocity();
}
inline void BaseMoving::unsafe_arena_set_allocated_velocity(
    ::osi3::Vector3d* velocity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(velocity_);
  }
  velocity_ = velocity;
  if (velocity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseMoving.velocity)
}
inline ::osi3::Vector3d* BaseMoving::release_velocity() {
  
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::unsafe_arena_release_velocity() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.velocity)
  
  ::osi3::Vector3d* temp = velocity_;
  velocity_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::_internal_mutable_velocity() {
  
  if (velocity_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArena());
    velocity_ = p;
  }
  return velocity_;
}
inline ::osi3::Vector3d* BaseMoving::mutable_velocity() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.velocity)
  return _internal_mutable_velocity();
}
inline void BaseMoving::set_allocated_velocity(::osi3::Vector3d* velocity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete velocity_;
  }
  if (velocity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(velocity);
    if (message_arena != submessage_arena) {
      velocity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, velocity, submessage_arena);
    }
    
  } else {
    
  }
  velocity_ = velocity;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.velocity)
}

// .osi3.Vector3d acceleration = 5;
inline bool BaseMoving::_internal_has_acceleration() const {
  return this != internal_default_instance() && acceleration_ != nullptr;
}
inline bool BaseMoving::has_acceleration() const {
  return _internal_has_acceleration();
}
inline void BaseMoving::clear_acceleration() {
  if (GetArena() == nullptr && acceleration_ != nullptr) {
    delete acceleration_;
  }
  acceleration_ = nullptr;
}
inline const ::osi3::Vector3d& BaseMoving::_internal_acceleration() const {
  const ::osi3::Vector3d* p = acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& BaseMoving::acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.acceleration)
  return _internal_acceleration();
}
inline void BaseMoving::unsafe_arena_set_allocated_acceleration(
    ::osi3::Vector3d* acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(acceleration_);
  }
  acceleration_ = acceleration;
  if (acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseMoving.acceleration)
}
inline ::osi3::Vector3d* BaseMoving::release_acceleration() {
  
  ::osi3::Vector3d* temp = acceleration_;
  acceleration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::unsafe_arena_release_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.acceleration)
  
  ::osi3::Vector3d* temp = acceleration_;
  acceleration_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* BaseMoving::_internal_mutable_acceleration() {
  
  if (acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArena());
    acceleration_ = p;
  }
  return acceleration_;
}
inline ::osi3::Vector3d* BaseMoving::mutable_acceleration() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.acceleration)
  return _internal_mutable_acceleration();
}
inline void BaseMoving::set_allocated_acceleration(::osi3::Vector3d* acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete acceleration_;
  }
  if (acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(acceleration);
    if (message_arena != submessage_arena) {
      acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, acceleration, submessage_arena);
    }
    
  } else {
    
  }
  acceleration_ = acceleration;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.acceleration)
}

// .osi3.Orientation3d orientation_rate = 6;
inline bool BaseMoving::_internal_has_orientation_rate() const {
  return this != internal_default_instance() && orientation_rate_ != nullptr;
}
inline bool BaseMoving::has_orientation_rate() const {
  return _internal_has_orientation_rate();
}
inline void BaseMoving::clear_orientation_rate() {
  if (GetArena() == nullptr && orientation_rate_ != nullptr) {
    delete orientation_rate_;
  }
  orientation_rate_ = nullptr;
}
inline const ::osi3::Orientation3d& BaseMoving::_internal_orientation_rate() const {
  const ::osi3::Orientation3d* p = orientation_rate_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& BaseMoving::orientation_rate() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation_rate)
  return _internal_orientation_rate();
}
inline void BaseMoving::unsafe_arena_set_allocated_orientation_rate(
    ::osi3::Orientation3d* orientation_rate) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_rate_);
  }
  orientation_rate_ = orientation_rate;
  if (orientation_rate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseMoving.orientation_rate)
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation_rate() {
  
  ::osi3::Orientation3d* temp = orientation_rate_;
  orientation_rate_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::unsafe_arena_release_orientation_rate() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation_rate)
  
  ::osi3::Orientation3d* temp = orientation_rate_;
  orientation_rate_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::_internal_mutable_orientation_rate() {
  
  if (orientation_rate_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArena());
    orientation_rate_ = p;
  }
  return orientation_rate_;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation_rate() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation_rate)
  return _internal_mutable_orientation_rate();
}
inline void BaseMoving::set_allocated_orientation_rate(::osi3::Orientation3d* orientation_rate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_rate_;
  }
  if (orientation_rate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation_rate);
    if (message_arena != submessage_arena) {
      orientation_rate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_rate, submessage_arena);
    }
    
  } else {
    
  }
  orientation_rate_ = orientation_rate;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation_rate)
}

// .osi3.Orientation3d orientation_acceleration = 8;
inline bool BaseMoving::_internal_has_orientation_acceleration() const {
  return this != internal_default_instance() && orientation_acceleration_ != nullptr;
}
inline bool BaseMoving::has_orientation_acceleration() const {
  return _internal_has_orientation_acceleration();
}
inline void BaseMoving::clear_orientation_acceleration() {
  if (GetArena() == nullptr && orientation_acceleration_ != nullptr) {
    delete orientation_acceleration_;
  }
  orientation_acceleration_ = nullptr;
}
inline const ::osi3::Orientation3d& BaseMoving::_internal_orientation_acceleration() const {
  const ::osi3::Orientation3d* p = orientation_acceleration_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& BaseMoving::orientation_acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.orientation_acceleration)
  return _internal_orientation_acceleration();
}
inline void BaseMoving::unsafe_arena_set_allocated_orientation_acceleration(
    ::osi3::Orientation3d* orientation_acceleration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_acceleration_);
  }
  orientation_acceleration_ = orientation_acceleration;
  if (orientation_acceleration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.BaseMoving.orientation_acceleration)
}
inline ::osi3::Orientation3d* BaseMoving::release_orientation_acceleration() {
  
  ::osi3::Orientation3d* temp = orientation_acceleration_;
  orientation_acceleration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::unsafe_arena_release_orientation_acceleration() {
  // @@protoc_insertion_point(field_release:osi3.BaseMoving.orientation_acceleration)
  
  ::osi3::Orientation3d* temp = orientation_acceleration_;
  orientation_acceleration_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* BaseMoving::_internal_mutable_orientation_acceleration() {
  
  if (orientation_acceleration_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArena());
    orientation_acceleration_ = p;
  }
  return orientation_acceleration_;
}
inline ::osi3::Orientation3d* BaseMoving::mutable_orientation_acceleration() {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.orientation_acceleration)
  return _internal_mutable_orientation_acceleration();
}
inline void BaseMoving::set_allocated_orientation_acceleration(::osi3::Orientation3d* orientation_acceleration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_acceleration_;
  }
  if (orientation_acceleration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation_acceleration);
    if (message_arena != submessage_arena) {
      orientation_acceleration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation_acceleration, submessage_arena);
    }
    
  } else {
    
  }
  orientation_acceleration_ = orientation_acceleration;
  // @@protoc_insertion_point(field_set_allocated:osi3.BaseMoving.orientation_acceleration)
}

// repeated .osi3.Vector2d base_polygon = 7;
inline int BaseMoving::_internal_base_polygon_size() const {
  return base_polygon_.size();
}
inline int BaseMoving::base_polygon_size() const {
  return _internal_base_polygon_size();
}
inline void BaseMoving::clear_base_polygon() {
  base_polygon_.Clear();
}
inline ::osi3::Vector2d* BaseMoving::mutable_base_polygon(int index) {
  // @@protoc_insertion_point(field_mutable:osi3.BaseMoving.base_polygon)
  return base_polygon_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >*
BaseMoving::mutable_base_polygon() {
  // @@protoc_insertion_point(field_mutable_list:osi3.BaseMoving.base_polygon)
  return &base_polygon_;
}
inline const ::osi3::Vector2d& BaseMoving::_internal_base_polygon(int index) const {
  return base_polygon_.Get(index);
}
inline const ::osi3::Vector2d& BaseMoving::base_polygon(int index) const {
  // @@protoc_insertion_point(field_get:osi3.BaseMoving.base_polygon)
  return _internal_base_polygon(index);
}
inline ::osi3::Vector2d* BaseMoving::_internal_add_base_polygon() {
  return base_polygon_.Add();
}
inline ::osi3::Vector2d* BaseMoving::add_base_polygon() {
  // @@protoc_insertion_point(field_add:osi3.BaseMoving.base_polygon)
  return _internal_add_base_polygon();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::osi3::Vector2d >&
BaseMoving::base_polygon() const {
  // @@protoc_insertion_point(field_list:osi3.BaseMoving.base_polygon)
  return base_polygon_;
}

// -------------------------------------------------------------------

// StatePoint

// .osi3.Timestamp timestamp = 1;
inline bool StatePoint::_internal_has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != nullptr;
}
inline bool StatePoint::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void StatePoint::clear_timestamp() {
  if (GetArena() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
inline const ::osi3::Timestamp& StatePoint::_internal_timestamp() const {
  const ::osi3::Timestamp* p = timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Timestamp&>(
      ::osi3::_Timestamp_default_instance_);
}
inline const ::osi3::Timestamp& StatePoint::timestamp() const {
  // @@protoc_insertion_point(field_get:osi3.StatePoint.timestamp)
  return _internal_timestamp();
}
inline void StatePoint::unsafe_arena_set_allocated_timestamp(
    ::osi3::Timestamp* timestamp) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timestamp_);
  }
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.StatePoint.timestamp)
}
inline ::osi3::Timestamp* StatePoint::release_timestamp() {
  
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Timestamp* StatePoint::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_release:osi3.StatePoint.timestamp)
  
  ::osi3::Timestamp* temp = timestamp_;
  timestamp_ = nullptr;
  return temp;
}
inline ::osi3::Timestamp* StatePoint::_internal_mutable_timestamp() {
  
  if (timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Timestamp>(GetArena());
    timestamp_ = p;
  }
  return timestamp_;
}
inline ::osi3::Timestamp* StatePoint::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:osi3.StatePoint.timestamp)
  return _internal_mutable_timestamp();
}
inline void StatePoint::set_allocated_timestamp(::osi3::Timestamp* timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete timestamp_;
  }
  if (timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(timestamp);
    if (message_arena != submessage_arena) {
      timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:osi3.StatePoint.timestamp)
}

// .osi3.Vector3d position = 2;
inline bool StatePoint::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool StatePoint::has_position() const {
  return _internal_has_position();
}
inline void StatePoint::clear_position() {
  if (GetArena() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::osi3::Vector3d& StatePoint::_internal_position() const {
  const ::osi3::Vector3d* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Vector3d&>(
      ::osi3::_Vector3d_default_instance_);
}
inline const ::osi3::Vector3d& StatePoint::position() const {
  // @@protoc_insertion_point(field_get:osi3.StatePoint.position)
  return _internal_position();
}
inline void StatePoint::unsafe_arena_set_allocated_position(
    ::osi3::Vector3d* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.StatePoint.position)
}
inline ::osi3::Vector3d* StatePoint::release_position() {
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Vector3d* StatePoint::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:osi3.StatePoint.position)
  
  ::osi3::Vector3d* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::osi3::Vector3d* StatePoint::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Vector3d>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::osi3::Vector3d* StatePoint::mutable_position() {
  // @@protoc_insertion_point(field_mutable:osi3.StatePoint.position)
  return _internal_mutable_position();
}
inline void StatePoint::set_allocated_position(::osi3::Vector3d* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:osi3.StatePoint.position)
}

// .osi3.Orientation3d orientation = 3;
inline bool StatePoint::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool StatePoint::has_orientation() const {
  return _internal_has_orientation();
}
inline void StatePoint::clear_orientation() {
  if (GetArena() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
inline const ::osi3::Orientation3d& StatePoint::_internal_orientation() const {
  const ::osi3::Orientation3d* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::Orientation3d&>(
      ::osi3::_Orientation3d_default_instance_);
}
inline const ::osi3::Orientation3d& StatePoint::orientation() const {
  // @@protoc_insertion_point(field_get:osi3.StatePoint.orientation)
  return _internal_orientation();
}
inline void StatePoint::unsafe_arena_set_allocated_orientation(
    ::osi3::Orientation3d* orientation) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.StatePoint.orientation)
}
inline ::osi3::Orientation3d* StatePoint::release_orientation() {
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::Orientation3d* StatePoint::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:osi3.StatePoint.orientation)
  
  ::osi3::Orientation3d* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::osi3::Orientation3d* StatePoint::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::Orientation3d>(GetArena());
    orientation_ = p;
  }
  return orientation_;
}
inline ::osi3::Orientation3d* StatePoint::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:osi3.StatePoint.orientation)
  return _internal_mutable_orientation();
}
inline void StatePoint::set_allocated_orientation(::osi3::Orientation3d* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orientation_;
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orientation);
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:osi3.StatePoint.orientation)
}

// -------------------------------------------------------------------

// WavelengthData

// double start = 1;
inline void WavelengthData::clear_start() {
  start_ = 0;
}
inline double WavelengthData::_internal_start() const {
  return start_;
}
inline double WavelengthData::start() const {
  // @@protoc_insertion_point(field_get:osi3.WavelengthData.start)
  return _internal_start();
}
inline void WavelengthData::_internal_set_start(double value) {
  
  start_ = value;
}
inline void WavelengthData::set_start(double value) {
  _internal_set_start(value);
  // @@protoc_insertion_point(field_set:osi3.WavelengthData.start)
}

// double end = 2;
inline void WavelengthData::clear_end() {
  end_ = 0;
}
inline double WavelengthData::_internal_end() const {
  return end_;
}
inline double WavelengthData::end() const {
  // @@protoc_insertion_point(field_get:osi3.WavelengthData.end)
  return _internal_end();
}
inline void WavelengthData::_internal_set_end(double value) {
  
  end_ = value;
}
inline void WavelengthData::set_end(double value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:osi3.WavelengthData.end)
}

// double samples_number = 3;
inline void WavelengthData::clear_samples_number() {
  samples_number_ = 0;
}
inline double WavelengthData::_internal_samples_number() const {
  return samples_number_;
}
inline double WavelengthData::samples_number() const {
  // @@protoc_insertion_point(field_get:osi3.WavelengthData.samples_number)
  return _internal_samples_number();
}
inline void WavelengthData::_internal_set_samples_number(double value) {
  
  samples_number_ = value;
}
inline void WavelengthData::set_samples_number(double value) {
  _internal_set_samples_number(value);
  // @@protoc_insertion_point(field_set:osi3.WavelengthData.samples_number)
}

// -------------------------------------------------------------------

// SpatialSignalStrength

// double horizontal_angle = 1;
inline void SpatialSignalStrength::clear_horizontal_angle() {
  horizontal_angle_ = 0;
}
inline double SpatialSignalStrength::_internal_horizontal_angle() const {
  return horizontal_angle_;
}
inline double SpatialSignalStrength::horizontal_angle() const {
  // @@protoc_insertion_point(field_get:osi3.SpatialSignalStrength.horizontal_angle)
  return _internal_horizontal_angle();
}
inline void SpatialSignalStrength::_internal_set_horizontal_angle(double value) {
  
  horizontal_angle_ = value;
}
inline void SpatialSignalStrength::set_horizontal_angle(double value) {
  _internal_set_horizontal_angle(value);
  // @@protoc_insertion_point(field_set:osi3.SpatialSignalStrength.horizontal_angle)
}

// double vertical_angle = 2;
inline void SpatialSignalStrength::clear_vertical_angle() {
  vertical_angle_ = 0;
}
inline double SpatialSignalStrength::_internal_vertical_angle() const {
  return vertical_angle_;
}
inline double SpatialSignalStrength::vertical_angle() const {
  // @@protoc_insertion_point(field_get:osi3.SpatialSignalStrength.vertical_angle)
  return _internal_vertical_angle();
}
inline void SpatialSignalStrength::_internal_set_vertical_angle(double value) {
  
  vertical_angle_ = value;
}
inline void SpatialSignalStrength::set_vertical_angle(double value) {
  _internal_set_vertical_angle(value);
  // @@protoc_insertion_point(field_set:osi3.SpatialSignalStrength.vertical_angle)
}

// double signal_strength = 3;
inline void SpatialSignalStrength::clear_signal_strength() {
  signal_strength_ = 0;
}
inline double SpatialSignalStrength::_internal_signal_strength() const {
  return signal_strength_;
}
inline double SpatialSignalStrength::signal_strength() const {
  // @@protoc_insertion_point(field_get:osi3.SpatialSignalStrength.signal_strength)
  return _internal_signal_strength();
}
inline void SpatialSignalStrength::_internal_set_signal_strength(double value) {
  
  signal_strength_ = value;
}
inline void SpatialSignalStrength::set_signal_strength(double value) {
  _internal_set_signal_strength(value);
  // @@protoc_insertion_point(field_set:osi3.SpatialSignalStrength.signal_strength)
}

// -------------------------------------------------------------------

// ColorDescription

// .osi3.ColorGrey grey = 1;
inline bool ColorDescription::_internal_has_grey() const {
  return this != internal_default_instance() && grey_ != nullptr;
}
inline bool ColorDescription::has_grey() const {
  return _internal_has_grey();
}
inline void ColorDescription::clear_grey() {
  if (GetArena() == nullptr && grey_ != nullptr) {
    delete grey_;
  }
  grey_ = nullptr;
}
inline const ::osi3::ColorGrey& ColorDescription::_internal_grey() const {
  const ::osi3::ColorGrey* p = grey_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::ColorGrey&>(
      ::osi3::_ColorGrey_default_instance_);
}
inline const ::osi3::ColorGrey& ColorDescription::grey() const {
  // @@protoc_insertion_point(field_get:osi3.ColorDescription.grey)
  return _internal_grey();
}
inline void ColorDescription::unsafe_arena_set_allocated_grey(
    ::osi3::ColorGrey* grey) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grey_);
  }
  grey_ = grey;
  if (grey) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ColorDescription.grey)
}
inline ::osi3::ColorGrey* ColorDescription::release_grey() {
  
  ::osi3::ColorGrey* temp = grey_;
  grey_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::ColorGrey* ColorDescription::unsafe_arena_release_grey() {
  // @@protoc_insertion_point(field_release:osi3.ColorDescription.grey)
  
  ::osi3::ColorGrey* temp = grey_;
  grey_ = nullptr;
  return temp;
}
inline ::osi3::ColorGrey* ColorDescription::_internal_mutable_grey() {
  
  if (grey_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorGrey>(GetArena());
    grey_ = p;
  }
  return grey_;
}
inline ::osi3::ColorGrey* ColorDescription::mutable_grey() {
  // @@protoc_insertion_point(field_mutable:osi3.ColorDescription.grey)
  return _internal_mutable_grey();
}
inline void ColorDescription::set_allocated_grey(::osi3::ColorGrey* grey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grey_;
  }
  if (grey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grey);
    if (message_arena != submessage_arena) {
      grey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grey, submessage_arena);
    }
    
  } else {
    
  }
  grey_ = grey;
  // @@protoc_insertion_point(field_set_allocated:osi3.ColorDescription.grey)
}

// .osi3.ColorRGB rgb = 2;
inline bool ColorDescription::_internal_has_rgb() const {
  return this != internal_default_instance() && rgb_ != nullptr;
}
inline bool ColorDescription::has_rgb() const {
  return _internal_has_rgb();
}
inline void ColorDescription::clear_rgb() {
  if (GetArena() == nullptr && rgb_ != nullptr) {
    delete rgb_;
  }
  rgb_ = nullptr;
}
inline const ::osi3::ColorRGB& ColorDescription::_internal_rgb() const {
  const ::osi3::ColorRGB* p = rgb_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::ColorRGB&>(
      ::osi3::_ColorRGB_default_instance_);
}
inline const ::osi3::ColorRGB& ColorDescription::rgb() const {
  // @@protoc_insertion_point(field_get:osi3.ColorDescription.rgb)
  return _internal_rgb();
}
inline void ColorDescription::unsafe_arena_set_allocated_rgb(
    ::osi3::ColorRGB* rgb) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgb_);
  }
  rgb_ = rgb;
  if (rgb) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ColorDescription.rgb)
}
inline ::osi3::ColorRGB* ColorDescription::release_rgb() {
  
  ::osi3::ColorRGB* temp = rgb_;
  rgb_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::ColorRGB* ColorDescription::unsafe_arena_release_rgb() {
  // @@protoc_insertion_point(field_release:osi3.ColorDescription.rgb)
  
  ::osi3::ColorRGB* temp = rgb_;
  rgb_ = nullptr;
  return temp;
}
inline ::osi3::ColorRGB* ColorDescription::_internal_mutable_rgb() {
  
  if (rgb_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorRGB>(GetArena());
    rgb_ = p;
  }
  return rgb_;
}
inline ::osi3::ColorRGB* ColorDescription::mutable_rgb() {
  // @@protoc_insertion_point(field_mutable:osi3.ColorDescription.rgb)
  return _internal_mutable_rgb();
}
inline void ColorDescription::set_allocated_rgb(::osi3::ColorRGB* rgb) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rgb_;
  }
  if (rgb) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rgb);
    if (message_arena != submessage_arena) {
      rgb = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgb, submessage_arena);
    }
    
  } else {
    
  }
  rgb_ = rgb;
  // @@protoc_insertion_point(field_set_allocated:osi3.ColorDescription.rgb)
}

// .osi3.ColorRGBIR rgbir = 3;
inline bool ColorDescription::_internal_has_rgbir() const {
  return this != internal_default_instance() && rgbir_ != nullptr;
}
inline bool ColorDescription::has_rgbir() const {
  return _internal_has_rgbir();
}
inline void ColorDescription::clear_rgbir() {
  if (GetArena() == nullptr && rgbir_ != nullptr) {
    delete rgbir_;
  }
  rgbir_ = nullptr;
}
inline const ::osi3::ColorRGBIR& ColorDescription::_internal_rgbir() const {
  const ::osi3::ColorRGBIR* p = rgbir_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::ColorRGBIR&>(
      ::osi3::_ColorRGBIR_default_instance_);
}
inline const ::osi3::ColorRGBIR& ColorDescription::rgbir() const {
  // @@protoc_insertion_point(field_get:osi3.ColorDescription.rgbir)
  return _internal_rgbir();
}
inline void ColorDescription::unsafe_arena_set_allocated_rgbir(
    ::osi3::ColorRGBIR* rgbir) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rgbir_);
  }
  rgbir_ = rgbir;
  if (rgbir) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ColorDescription.rgbir)
}
inline ::osi3::ColorRGBIR* ColorDescription::release_rgbir() {
  
  ::osi3::ColorRGBIR* temp = rgbir_;
  rgbir_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::ColorRGBIR* ColorDescription::unsafe_arena_release_rgbir() {
  // @@protoc_insertion_point(field_release:osi3.ColorDescription.rgbir)
  
  ::osi3::ColorRGBIR* temp = rgbir_;
  rgbir_ = nullptr;
  return temp;
}
inline ::osi3::ColorRGBIR* ColorDescription::_internal_mutable_rgbir() {
  
  if (rgbir_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorRGBIR>(GetArena());
    rgbir_ = p;
  }
  return rgbir_;
}
inline ::osi3::ColorRGBIR* ColorDescription::mutable_rgbir() {
  // @@protoc_insertion_point(field_mutable:osi3.ColorDescription.rgbir)
  return _internal_mutable_rgbir();
}
inline void ColorDescription::set_allocated_rgbir(::osi3::ColorRGBIR* rgbir) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rgbir_;
  }
  if (rgbir) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rgbir);
    if (message_arena != submessage_arena) {
      rgbir = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rgbir, submessage_arena);
    }
    
  } else {
    
  }
  rgbir_ = rgbir;
  // @@protoc_insertion_point(field_set_allocated:osi3.ColorDescription.rgbir)
}

// .osi3.ColorHSV hsv = 4;
inline bool ColorDescription::_internal_has_hsv() const {
  return this != internal_default_instance() && hsv_ != nullptr;
}
inline bool ColorDescription::has_hsv() const {
  return _internal_has_hsv();
}
inline void ColorDescription::clear_hsv() {
  if (GetArena() == nullptr && hsv_ != nullptr) {
    delete hsv_;
  }
  hsv_ = nullptr;
}
inline const ::osi3::ColorHSV& ColorDescription::_internal_hsv() const {
  const ::osi3::ColorHSV* p = hsv_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::ColorHSV&>(
      ::osi3::_ColorHSV_default_instance_);
}
inline const ::osi3::ColorHSV& ColorDescription::hsv() const {
  // @@protoc_insertion_point(field_get:osi3.ColorDescription.hsv)
  return _internal_hsv();
}
inline void ColorDescription::unsafe_arena_set_allocated_hsv(
    ::osi3::ColorHSV* hsv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hsv_);
  }
  hsv_ = hsv;
  if (hsv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ColorDescription.hsv)
}
inline ::osi3::ColorHSV* ColorDescription::release_hsv() {
  
  ::osi3::ColorHSV* temp = hsv_;
  hsv_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::ColorHSV* ColorDescription::unsafe_arena_release_hsv() {
  // @@protoc_insertion_point(field_release:osi3.ColorDescription.hsv)
  
  ::osi3::ColorHSV* temp = hsv_;
  hsv_ = nullptr;
  return temp;
}
inline ::osi3::ColorHSV* ColorDescription::_internal_mutable_hsv() {
  
  if (hsv_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorHSV>(GetArena());
    hsv_ = p;
  }
  return hsv_;
}
inline ::osi3::ColorHSV* ColorDescription::mutable_hsv() {
  // @@protoc_insertion_point(field_mutable:osi3.ColorDescription.hsv)
  return _internal_mutable_hsv();
}
inline void ColorDescription::set_allocated_hsv(::osi3::ColorHSV* hsv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete hsv_;
  }
  if (hsv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(hsv);
    if (message_arena != submessage_arena) {
      hsv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hsv, submessage_arena);
    }
    
  } else {
    
  }
  hsv_ = hsv;
  // @@protoc_insertion_point(field_set_allocated:osi3.ColorDescription.hsv)
}

// .osi3.ColorLUV luv = 5;
inline bool ColorDescription::_internal_has_luv() const {
  return this != internal_default_instance() && luv_ != nullptr;
}
inline bool ColorDescription::has_luv() const {
  return _internal_has_luv();
}
inline void ColorDescription::clear_luv() {
  if (GetArena() == nullptr && luv_ != nullptr) {
    delete luv_;
  }
  luv_ = nullptr;
}
inline const ::osi3::ColorLUV& ColorDescription::_internal_luv() const {
  const ::osi3::ColorLUV* p = luv_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::ColorLUV&>(
      ::osi3::_ColorLUV_default_instance_);
}
inline const ::osi3::ColorLUV& ColorDescription::luv() const {
  // @@protoc_insertion_point(field_get:osi3.ColorDescription.luv)
  return _internal_luv();
}
inline void ColorDescription::unsafe_arena_set_allocated_luv(
    ::osi3::ColorLUV* luv) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(luv_);
  }
  luv_ = luv;
  if (luv) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ColorDescription.luv)
}
inline ::osi3::ColorLUV* ColorDescription::release_luv() {
  
  ::osi3::ColorLUV* temp = luv_;
  luv_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::ColorLUV* ColorDescription::unsafe_arena_release_luv() {
  // @@protoc_insertion_point(field_release:osi3.ColorDescription.luv)
  
  ::osi3::ColorLUV* temp = luv_;
  luv_ = nullptr;
  return temp;
}
inline ::osi3::ColorLUV* ColorDescription::_internal_mutable_luv() {
  
  if (luv_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorLUV>(GetArena());
    luv_ = p;
  }
  return luv_;
}
inline ::osi3::ColorLUV* ColorDescription::mutable_luv() {
  // @@protoc_insertion_point(field_mutable:osi3.ColorDescription.luv)
  return _internal_mutable_luv();
}
inline void ColorDescription::set_allocated_luv(::osi3::ColorLUV* luv) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete luv_;
  }
  if (luv) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(luv);
    if (message_arena != submessage_arena) {
      luv = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, luv, submessage_arena);
    }
    
  } else {
    
  }
  luv_ = luv;
  // @@protoc_insertion_point(field_set_allocated:osi3.ColorDescription.luv)
}

// .osi3.ColorCMYK cmyk = 6;
inline bool ColorDescription::_internal_has_cmyk() const {
  return this != internal_default_instance() && cmyk_ != nullptr;
}
inline bool ColorDescription::has_cmyk() const {
  return _internal_has_cmyk();
}
inline void ColorDescription::clear_cmyk() {
  if (GetArena() == nullptr && cmyk_ != nullptr) {
    delete cmyk_;
  }
  cmyk_ = nullptr;
}
inline const ::osi3::ColorCMYK& ColorDescription::_internal_cmyk() const {
  const ::osi3::ColorCMYK* p = cmyk_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::ColorCMYK&>(
      ::osi3::_ColorCMYK_default_instance_);
}
inline const ::osi3::ColorCMYK& ColorDescription::cmyk() const {
  // @@protoc_insertion_point(field_get:osi3.ColorDescription.cmyk)
  return _internal_cmyk();
}
inline void ColorDescription::unsafe_arena_set_allocated_cmyk(
    ::osi3::ColorCMYK* cmyk) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cmyk_);
  }
  cmyk_ = cmyk;
  if (cmyk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.ColorDescription.cmyk)
}
inline ::osi3::ColorCMYK* ColorDescription::release_cmyk() {
  
  ::osi3::ColorCMYK* temp = cmyk_;
  cmyk_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::ColorCMYK* ColorDescription::unsafe_arena_release_cmyk() {
  // @@protoc_insertion_point(field_release:osi3.ColorDescription.cmyk)
  
  ::osi3::ColorCMYK* temp = cmyk_;
  cmyk_ = nullptr;
  return temp;
}
inline ::osi3::ColorCMYK* ColorDescription::_internal_mutable_cmyk() {
  
  if (cmyk_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::ColorCMYK>(GetArena());
    cmyk_ = p;
  }
  return cmyk_;
}
inline ::osi3::ColorCMYK* ColorDescription::mutable_cmyk() {
  // @@protoc_insertion_point(field_mutable:osi3.ColorDescription.cmyk)
  return _internal_mutable_cmyk();
}
inline void ColorDescription::set_allocated_cmyk(::osi3::ColorCMYK* cmyk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete cmyk_;
  }
  if (cmyk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cmyk);
    if (message_arena != submessage_arena) {
      cmyk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cmyk, submessage_arena);
    }
    
  } else {
    
  }
  cmyk_ = cmyk;
  // @@protoc_insertion_point(field_set_allocated:osi3.ColorDescription.cmyk)
}

// -------------------------------------------------------------------

// ColorGrey

// double grey = 1;
inline void ColorGrey::clear_grey() {
  grey_ = 0;
}
inline double ColorGrey::_internal_grey() const {
  return grey_;
}
inline double ColorGrey::grey() const {
  // @@protoc_insertion_point(field_get:osi3.ColorGrey.grey)
  return _internal_grey();
}
inline void ColorGrey::_internal_set_grey(double value) {
  
  grey_ = value;
}
inline void ColorGrey::set_grey(double value) {
  _internal_set_grey(value);
  // @@protoc_insertion_point(field_set:osi3.ColorGrey.grey)
}

// -------------------------------------------------------------------

// ColorRGB

// double red = 1;
inline void ColorRGB::clear_red() {
  red_ = 0;
}
inline double ColorRGB::_internal_red() const {
  return red_;
}
inline double ColorRGB::red() const {
  // @@protoc_insertion_point(field_get:osi3.ColorRGB.red)
  return _internal_red();
}
inline void ColorRGB::_internal_set_red(double value) {
  
  red_ = value;
}
inline void ColorRGB::set_red(double value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:osi3.ColorRGB.red)
}

// double green = 2;
inline void ColorRGB::clear_green() {
  green_ = 0;
}
inline double ColorRGB::_internal_green() const {
  return green_;
}
inline double ColorRGB::green() const {
  // @@protoc_insertion_point(field_get:osi3.ColorRGB.green)
  return _internal_green();
}
inline void ColorRGB::_internal_set_green(double value) {
  
  green_ = value;
}
inline void ColorRGB::set_green(double value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:osi3.ColorRGB.green)
}

// double blue = 3;
inline void ColorRGB::clear_blue() {
  blue_ = 0;
}
inline double ColorRGB::_internal_blue() const {
  return blue_;
}
inline double ColorRGB::blue() const {
  // @@protoc_insertion_point(field_get:osi3.ColorRGB.blue)
  return _internal_blue();
}
inline void ColorRGB::_internal_set_blue(double value) {
  
  blue_ = value;
}
inline void ColorRGB::set_blue(double value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:osi3.ColorRGB.blue)
}

// -------------------------------------------------------------------

// ColorRGBIR

// double red = 1;
inline void ColorRGBIR::clear_red() {
  red_ = 0;
}
inline double ColorRGBIR::_internal_red() const {
  return red_;
}
inline double ColorRGBIR::red() const {
  // @@protoc_insertion_point(field_get:osi3.ColorRGBIR.red)
  return _internal_red();
}
inline void ColorRGBIR::_internal_set_red(double value) {
  
  red_ = value;
}
inline void ColorRGBIR::set_red(double value) {
  _internal_set_red(value);
  // @@protoc_insertion_point(field_set:osi3.ColorRGBIR.red)
}

// double green = 2;
inline void ColorRGBIR::clear_green() {
  green_ = 0;
}
inline double ColorRGBIR::_internal_green() const {
  return green_;
}
inline double ColorRGBIR::green() const {
  // @@protoc_insertion_point(field_get:osi3.ColorRGBIR.green)
  return _internal_green();
}
inline void ColorRGBIR::_internal_set_green(double value) {
  
  green_ = value;
}
inline void ColorRGBIR::set_green(double value) {
  _internal_set_green(value);
  // @@protoc_insertion_point(field_set:osi3.ColorRGBIR.green)
}

// double blue = 3;
inline void ColorRGBIR::clear_blue() {
  blue_ = 0;
}
inline double ColorRGBIR::_internal_blue() const {
  return blue_;
}
inline double ColorRGBIR::blue() const {
  // @@protoc_insertion_point(field_get:osi3.ColorRGBIR.blue)
  return _internal_blue();
}
inline void ColorRGBIR::_internal_set_blue(double value) {
  
  blue_ = value;
}
inline void ColorRGBIR::set_blue(double value) {
  _internal_set_blue(value);
  // @@protoc_insertion_point(field_set:osi3.ColorRGBIR.blue)
}

// double infrared = 4;
inline void ColorRGBIR::clear_infrared() {
  infrared_ = 0;
}
inline double ColorRGBIR::_internal_infrared() const {
  return infrared_;
}
inline double ColorRGBIR::infrared() const {
  // @@protoc_insertion_point(field_get:osi3.ColorRGBIR.infrared)
  return _internal_infrared();
}
inline void ColorRGBIR::_internal_set_infrared(double value) {
  
  infrared_ = value;
}
inline void ColorRGBIR::set_infrared(double value) {
  _internal_set_infrared(value);
  // @@protoc_insertion_point(field_set:osi3.ColorRGBIR.infrared)
}

// -------------------------------------------------------------------

// ColorHSV

// double hue = 1;
inline void ColorHSV::clear_hue() {
  hue_ = 0;
}
inline double ColorHSV::_internal_hue() const {
  return hue_;
}
inline double ColorHSV::hue() const {
  // @@protoc_insertion_point(field_get:osi3.ColorHSV.hue)
  return _internal_hue();
}
inline void ColorHSV::_internal_set_hue(double value) {
  
  hue_ = value;
}
inline void ColorHSV::set_hue(double value) {
  _internal_set_hue(value);
  // @@protoc_insertion_point(field_set:osi3.ColorHSV.hue)
}

// double saturation = 2;
inline void ColorHSV::clear_saturation() {
  saturation_ = 0;
}
inline double ColorHSV::_internal_saturation() const {
  return saturation_;
}
inline double ColorHSV::saturation() const {
  // @@protoc_insertion_point(field_get:osi3.ColorHSV.saturation)
  return _internal_saturation();
}
inline void ColorHSV::_internal_set_saturation(double value) {
  
  saturation_ = value;
}
inline void ColorHSV::set_saturation(double value) {
  _internal_set_saturation(value);
  // @@protoc_insertion_point(field_set:osi3.ColorHSV.saturation)
}

// double value = 3;
inline void ColorHSV::clear_value() {
  value_ = 0;
}
inline double ColorHSV::_internal_value() const {
  return value_;
}
inline double ColorHSV::value() const {
  // @@protoc_insertion_point(field_get:osi3.ColorHSV.value)
  return _internal_value();
}
inline void ColorHSV::_internal_set_value(double value) {
  
  value_ = value;
}
inline void ColorHSV::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:osi3.ColorHSV.value)
}

// -------------------------------------------------------------------

// ColorLUV

// double luminance = 1;
inline void ColorLUV::clear_luminance() {
  luminance_ = 0;
}
inline double ColorLUV::_internal_luminance() const {
  return luminance_;
}
inline double ColorLUV::luminance() const {
  // @@protoc_insertion_point(field_get:osi3.ColorLUV.luminance)
  return _internal_luminance();
}
inline void ColorLUV::_internal_set_luminance(double value) {
  
  luminance_ = value;
}
inline void ColorLUV::set_luminance(double value) {
  _internal_set_luminance(value);
  // @@protoc_insertion_point(field_set:osi3.ColorLUV.luminance)
}

// double u = 2;
inline void ColorLUV::clear_u() {
  u_ = 0;
}
inline double ColorLUV::_internal_u() const {
  return u_;
}
inline double ColorLUV::u() const {
  // @@protoc_insertion_point(field_get:osi3.ColorLUV.u)
  return _internal_u();
}
inline void ColorLUV::_internal_set_u(double value) {
  
  u_ = value;
}
inline void ColorLUV::set_u(double value) {
  _internal_set_u(value);
  // @@protoc_insertion_point(field_set:osi3.ColorLUV.u)
}

// double v = 3;
inline void ColorLUV::clear_v() {
  v_ = 0;
}
inline double ColorLUV::_internal_v() const {
  return v_;
}
inline double ColorLUV::v() const {
  // @@protoc_insertion_point(field_get:osi3.ColorLUV.v)
  return _internal_v();
}
inline void ColorLUV::_internal_set_v(double value) {
  
  v_ = value;
}
inline void ColorLUV::set_v(double value) {
  _internal_set_v(value);
  // @@protoc_insertion_point(field_set:osi3.ColorLUV.v)
}

// -------------------------------------------------------------------

// ColorCMYK

// double cyan = 1;
inline void ColorCMYK::clear_cyan() {
  cyan_ = 0;
}
inline double ColorCMYK::_internal_cyan() const {
  return cyan_;
}
inline double ColorCMYK::cyan() const {
  // @@protoc_insertion_point(field_get:osi3.ColorCMYK.cyan)
  return _internal_cyan();
}
inline void ColorCMYK::_internal_set_cyan(double value) {
  
  cyan_ = value;
}
inline void ColorCMYK::set_cyan(double value) {
  _internal_set_cyan(value);
  // @@protoc_insertion_point(field_set:osi3.ColorCMYK.cyan)
}

// double magenta = 2;
inline void ColorCMYK::clear_magenta() {
  magenta_ = 0;
}
inline double ColorCMYK::_internal_magenta() const {
  return magenta_;
}
inline double ColorCMYK::magenta() const {
  // @@protoc_insertion_point(field_get:osi3.ColorCMYK.magenta)
  return _internal_magenta();
}
inline void ColorCMYK::_internal_set_magenta(double value) {
  
  magenta_ = value;
}
inline void ColorCMYK::set_magenta(double value) {
  _internal_set_magenta(value);
  // @@protoc_insertion_point(field_set:osi3.ColorCMYK.magenta)
}

// double yellow = 3;
inline void ColorCMYK::clear_yellow() {
  yellow_ = 0;
}
inline double ColorCMYK::_internal_yellow() const {
  return yellow_;
}
inline double ColorCMYK::yellow() const {
  // @@protoc_insertion_point(field_get:osi3.ColorCMYK.yellow)
  return _internal_yellow();
}
inline void ColorCMYK::_internal_set_yellow(double value) {
  
  yellow_ = value;
}
inline void ColorCMYK::set_yellow(double value) {
  _internal_set_yellow(value);
  // @@protoc_insertion_point(field_set:osi3.ColorCMYK.yellow)
}

// double key = 4;
inline void ColorCMYK::clear_key() {
  key_ = 0;
}
inline double ColorCMYK::_internal_key() const {
  return key_;
}
inline double ColorCMYK::key() const {
  // @@protoc_insertion_point(field_get:osi3.ColorCMYK.key)
  return _internal_key();
}
inline void ColorCMYK::_internal_set_key(double value) {
  
  key_ = value;
}
inline void ColorCMYK::set_key(double value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:osi3.ColorCMYK.key)
}

// -------------------------------------------------------------------

// Pedalry

// double pedal_position_acceleration = 1;
inline void Pedalry::clear_pedal_position_acceleration() {
  pedal_position_acceleration_ = 0;
}
inline double Pedalry::_internal_pedal_position_acceleration() const {
  return pedal_position_acceleration_;
}
inline double Pedalry::pedal_position_acceleration() const {
  // @@protoc_insertion_point(field_get:osi3.Pedalry.pedal_position_acceleration)
  return _internal_pedal_position_acceleration();
}
inline void Pedalry::_internal_set_pedal_position_acceleration(double value) {
  
  pedal_position_acceleration_ = value;
}
inline void Pedalry::set_pedal_position_acceleration(double value) {
  _internal_set_pedal_position_acceleration(value);
  // @@protoc_insertion_point(field_set:osi3.Pedalry.pedal_position_acceleration)
}

// double pedal_position_brake = 2;
inline void Pedalry::clear_pedal_position_brake() {
  pedal_position_brake_ = 0;
}
inline double Pedalry::_internal_pedal_position_brake() const {
  return pedal_position_brake_;
}
inline double Pedalry::pedal_position_brake() const {
  // @@protoc_insertion_point(field_get:osi3.Pedalry.pedal_position_brake)
  return _internal_pedal_position_brake();
}
inline void Pedalry::_internal_set_pedal_position_brake(double value) {
  
  pedal_position_brake_ = value;
}
inline void Pedalry::set_pedal_position_brake(double value) {
  _internal_set_pedal_position_brake(value);
  // @@protoc_insertion_point(field_set:osi3.Pedalry.pedal_position_brake)
}

// double pedal_position_clutch = 3;
inline void Pedalry::clear_pedal_position_clutch() {
  pedal_position_clutch_ = 0;
}
inline double Pedalry::_internal_pedal_position_clutch() const {
  return pedal_position_clutch_;
}
inline double Pedalry::pedal_position_clutch() const {
  // @@protoc_insertion_point(field_get:osi3.Pedalry.pedal_position_clutch)
  return _internal_pedal_position_clutch();
}
inline void Pedalry::_internal_set_pedal_position_clutch(double value) {
  
  pedal_position_clutch_ = value;
}
inline void Pedalry::set_pedal_position_clutch(double value) {
  _internal_set_pedal_position_clutch(value);
  // @@protoc_insertion_point(field_set:osi3.Pedalry.pedal_position_clutch)
}

// -------------------------------------------------------------------

// VehicleSteeringWheel

// double angle = 1;
inline void VehicleSteeringWheel::clear_angle() {
  angle_ = 0;
}
inline double VehicleSteeringWheel::_internal_angle() const {
  return angle_;
}
inline double VehicleSteeringWheel::angle() const {
  // @@protoc_insertion_point(field_get:osi3.VehicleSteeringWheel.angle)
  return _internal_angle();
}
inline void VehicleSteeringWheel::_internal_set_angle(double value) {
  
  angle_ = value;
}
inline void VehicleSteeringWheel::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:osi3.VehicleSteeringWheel.angle)
}

// double angular_speed = 2;
inline void VehicleSteeringWheel::clear_angular_speed() {
  angular_speed_ = 0;
}
inline double VehicleSteeringWheel::_internal_angular_speed() const {
  return angular_speed_;
}
inline double VehicleSteeringWheel::angular_speed() const {
  // @@protoc_insertion_point(field_get:osi3.VehicleSteeringWheel.angular_speed)
  return _internal_angular_speed();
}
inline void VehicleSteeringWheel::_internal_set_angular_speed(double value) {
  
  angular_speed_ = value;
}
inline void VehicleSteeringWheel::set_angular_speed(double value) {
  _internal_set_angular_speed(value);
  // @@protoc_insertion_point(field_set:osi3.VehicleSteeringWheel.angular_speed)
}

// double torque = 3;
inline void VehicleSteeringWheel::clear_torque() {
  torque_ = 0;
}
inline double VehicleSteeringWheel::_internal_torque() const {
  return torque_;
}
inline double VehicleSteeringWheel::torque() const {
  // @@protoc_insertion_point(field_get:osi3.VehicleSteeringWheel.torque)
  return _internal_torque();
}
inline void VehicleSteeringWheel::_internal_set_torque(double value) {
  
  torque_ = value;
}
inline void VehicleSteeringWheel::set_torque(double value) {
  _internal_set_torque(value);
  // @@protoc_insertion_point(field_set:osi3.VehicleSteeringWheel.torque)
}

// -------------------------------------------------------------------

// GeodeticPosition

// double longitude = 1;
inline void GeodeticPosition::clear_longitude() {
  longitude_ = 0;
}
inline double GeodeticPosition::_internal_longitude() const {
  return longitude_;
}
inline double GeodeticPosition::longitude() const {
  // @@protoc_insertion_point(field_get:osi3.GeodeticPosition.longitude)
  return _internal_longitude();
}
inline void GeodeticPosition::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GeodeticPosition::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:osi3.GeodeticPosition.longitude)
}

// double latitude = 2;
inline void GeodeticPosition::clear_latitude() {
  latitude_ = 0;
}
inline double GeodeticPosition::_internal_latitude() const {
  return latitude_;
}
inline double GeodeticPosition::latitude() const {
  // @@protoc_insertion_point(field_get:osi3.GeodeticPosition.latitude)
  return _internal_latitude();
}
inline void GeodeticPosition::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GeodeticPosition::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:osi3.GeodeticPosition.latitude)
}

// double altitude = 3;
inline void GeodeticPosition::clear_altitude() {
  altitude_ = 0;
}
inline double GeodeticPosition::_internal_altitude() const {
  return altitude_;
}
inline double GeodeticPosition::altitude() const {
  // @@protoc_insertion_point(field_get:osi3.GeodeticPosition.altitude)
  return _internal_altitude();
}
inline void GeodeticPosition::_internal_set_altitude(double value) {
  
  altitude_ = value;
}
inline void GeodeticPosition::set_altitude(double value) {
  _internal_set_altitude(value);
  // @@protoc_insertion_point(field_set:osi3.GeodeticPosition.altitude)
}

// -------------------------------------------------------------------

// KeyValuePair

// string key = 1;
inline void KeyValuePair::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& KeyValuePair::key() const {
  // @@protoc_insertion_point(field_get:osi3.KeyValuePair.key)
  return _internal_key();
}
inline void KeyValuePair::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:osi3.KeyValuePair.key)
}
inline std::string* KeyValuePair::mutable_key() {
  // @@protoc_insertion_point(field_mutable:osi3.KeyValuePair.key)
  return _internal_mutable_key();
}
inline const std::string& KeyValuePair::_internal_key() const {
  return key_.Get();
}
inline void KeyValuePair::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValuePair::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osi3.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osi3.KeyValuePair.key)
}
inline void KeyValuePair::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osi3.KeyValuePair.key)
}
inline std::string* KeyValuePair::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValuePair::release_key() {
  // @@protoc_insertion_point(field_release:osi3.KeyValuePair.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValuePair::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osi3.KeyValuePair.key)
}

// string value = 2;
inline void KeyValuePair::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& KeyValuePair::value() const {
  // @@protoc_insertion_point(field_get:osi3.KeyValuePair.value)
  return _internal_value();
}
inline void KeyValuePair::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:osi3.KeyValuePair.value)
}
inline std::string* KeyValuePair::mutable_value() {
  // @@protoc_insertion_point(field_mutable:osi3.KeyValuePair.value)
  return _internal_mutable_value();
}
inline const std::string& KeyValuePair::_internal_value() const {
  return value_.Get();
}
inline void KeyValuePair::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void KeyValuePair::set_value(std::string&& value) {
  
  value_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:osi3.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:osi3.KeyValuePair.value)
}
inline void KeyValuePair::set_value(const char* value,
    size_t size) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:osi3.KeyValuePair.value)
}
inline std::string* KeyValuePair::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* KeyValuePair::release_value() {
  // @@protoc_insertion_point(field_release:osi3.KeyValuePair.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void KeyValuePair::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:osi3.KeyValuePair.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fcommon_2eproto
